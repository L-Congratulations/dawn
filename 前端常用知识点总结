一、git
1.1、创建gitHub仓库
http://book.jirengu.com/fe/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/Git.html // git教程在最后
右上角选择new respository创建一个新的项目
然后记得勾选Initialize this repository with a README，创建完成

1.2、将版本库克隆到本地：
git clone git@github.com:L-Congratulations/dawn.git  // 注意这里是ssh协议地址

1.3、常用命令：
git pull 把远程仓库的变动更新合并到本地仓库
git push origin master 把当前本地库里的改动推送到远程库(origin)的master 分支

二、语义化：通过标签对页面内容进行划分。
2.1、结构清晰：便于人理解维护。有利于搜索引擎及爬虫识别页面信息。
2.2、即使没有css等样式效果的情况下也能呈现较好的内容结构与代码结构

三、css选择器： 选择出我们需要添加样式的html元素。
3.1、元素选择器：
p {
  color: red;
}
3.2、ID和类选择器：
#notification {
  font-size: 24px;
}
3.3、通用选择器：
* {
  box-sizing: border-box;
}
3.4、属性选择器：
[attr]  [attr] 选择包含 attr 属性的所有元素，不论 attr 的值为何：
[disabled] {
  cursor: not-allowed;
}

[attr=val]  [attr=val] 仅选择 attr 属性被赋值为 val 的所有元素：
[data-color="gray"] {
  color: #ccc;
}
[attr~=val] [attr~=val] 仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。

[attr*=val] [attr*=val] 选择 attr 属性的值中包含字符串 val 的元素：
[title*="fuck"] {
  display: none;
}
[attr^=val] [attr^=val] 选择 attr 属性的值以 val 开头（包括val）的元素：
[href^="http://"] {
  background-color: #f0ad4e;
}
[attr$=val] [attr$=val] 选择 attr 属性的值以 val 结尾（包括val）的元素：
[src$="gif"] {
  border: 1px solid #ccc;
}
[attr|=val] [attr|=val] 选择 attr 属性的值以 val（包括val）或 val-开头的元素（-用来处理语言编码）：
[lang|="zh"] {
  font-family: '微软雅黑';
}
3.5、伪类选择器：
a:link { ... }
a:visited { ... }
a:hover { ... }
a:active { ... }
li:first-child { ... }
li:last-child { ... }
body :not(p) { ... }
p:not(.warning) { ... }

3.6、伪元素
::after

::after

.clearfix::after {
  content: '';
  clear: both;
  display: block;
}
::before

::before

.happy::before {
  content: '😁';
}
::selection

::selection 应用于文档中被用户高亮的部分（比如鼠标选中的部分）。

p::selection {
  color: white;
  background: blue;
}
::backdrop

::backdrop 实验特性

::first-letter

::first-letter 选中一整块文字第一行的第一个字母，当文字所处的行之前没有其他内容（如图片和内联的表格）。

::first-line

::first-line 将样式只应用于一个块状元素的首行。

::-webkit-input-placeholder

/* 设置 input 元素 placeholder 的字体颜色 */
input::-webkit-input-placeholder {
  color: #aaa;
}
3.7、组合选择器：
A, B：
.author, .famous {
  font-weight: bold;
}
A B
A > B
A + B
A ~ B



四、盒模型：是一个用来包裹html内容的盒子，包括内容，border，margin，padding。
4.1、盒模型怪异模式和标准模式：
标准模式：box-sizing:content-box;
怪异模式：box-sizing:border-box;
标准模式会被设置的padding撑开，而怪异模式则相当于将盒子的大小固定好，再将内容装入盒子。盒子的大小并不会被padding所撑开。
4.2、怪异模式是“部分浏览器在支持W3C标准的同时还保留了原来的解析模式”，怪异模式主要表现在IE内核的浏览器。

当不对doctype进行定义时，会触发怪异模式。

在标准模式下，一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)

在怪异模式下，一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）

五、浮动：浮动元素自身会形成一个块级框，不管之前是什么
5.1、清除浮动：浮动会导致父容器高度塌陷，因此要清除浮动。
 clear: both;
5.2、浮动元素超出父元素边界的方法有两种：一种是浮动元素的宽度大于父元素的宽度，另一种就是设置负外边距。如果浮动元素存在负外边距，
且浮动元素与正常流元素重叠

六、定位：定位就是通过设置 position 属性的值来覆盖默认的布局方式。
6.1、相对定位：position: relative 就是“相对自己定位”
6.2、绝对定位：position: absolute 绝对定位元素脱离正常文档流，默认的定位上下文是 <html>。假如你想设定某个绝对定位元素的定位上下文，
则需要在这个元素的某个祖先元素上设置 position: relative。
6.3、固定定位：position: fixed 相对浏览器窗口进行定位。因此当滚动产生时，固定定位元素依然处于窗口的某个固定位置。
6.4、粘性定位：position: sticky 是相对定位和固定定位的结合。默认情况下表现为相对定位，当浏览器窗口顶端与元素的距离等于 top 属性的值时，
转变为固定定位。

七、居中：
.space {
  width: 100vw;
  height: 100vh;  /* 设置宽高以显示居中效果 */
  display: flex;  /* 弹性布局 */
  align-items: center;  /* 垂直居中 */
  justify-content: center;  /* 水平居中 */
}

八、兼容：
8.1、兼容产生的原因：新的功能旧版本不支持，不同浏览器实现方式不同。
8.2、解决思路：
根据产品需求选择合适技术（库）。
根据浏览器版本在用户中的分布情况，对旧的浏览器进行降级处理，或者直接提示用户升级浏览器。毕竟旧的浏览器厂商已经停止维护了。
根据兼容需求选择兼容工具(html5shiv.js-用于解决IE9以下版本浏览器对HTML5新增标签不识别，并导致CSS不起作用的问题。
使用方法
<!--[if lt IE 9]>
<script type="text/javascript"  src="http://www.ijquery.cn/js/html5shiv.js"></script>
<![endif]-->、
respond.js、css reset、normalize.css、Modernizr)
最后使用条件注释、CSS Hack、js 能力检测做一些补漏。
属性前缀法：color: yellow\9;  /*ie/edge 6-8*/IE6~IE10都认识"\9"
<!--[if lt IE 9]>
<script>window.location.href='http://cdn.dmeng.net/upgrade-your-browser.html?referrer='+location.href;</script>
<![endif]-->  
或者使用替代方法，比如自己封装一个方法来实现相同的效果。

九、ajax跨域：协议域名端口一个不同都算跨域。不能读写对方的资源
9.1、jsonp跨域：
9.2、跨域资源共享CORS：支持现代浏览器，IE支持10以上。进行跨域请求的时候浏览器会给该请求加一个请求头：Origin。
后台如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含 Origin 的值，
如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回

十、http：
10.1、



十二、flex
12.1、flex-direction：规定子元素在父容器中的排列方式
.container {
  flex-direction: row | row-reverse | column | column-reverse;
}
row 默认值，水平从左到右
row-reverse 水平从右到左
column 垂直从上到下
column-reverse 垂直从下到上
12.2、justify-content：在主轴（横轴）方向上的对齐方式，
.container {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}
12.3、align-items：弹性盒子元素在侧轴（纵轴）方向上的对齐方式
.container {
  align-items: flex-start | flex-end | center | baseline | stretch;
}
12.4、align-content：弹性盒堆叠伸缩行的对齐方式
.container {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}
space-between 各行在弹性盒容器中平均分布。第一行的侧轴起始边界紧靠住弹性盒容器的侧轴起始内容边界，最后一行的侧轴结束边界紧靠住弹性盒
容器的侧轴结束内容边界，剩余的行则按一定方式在弹性盒窗口中排列，以保持两两之间的空间相等。
12.5、子元素上的属性：
可以通过order属性改变，数值小的在前面，还可以是负数。order属性用来改变元素的排列顺序
.item {
  order: <integer>;
}
flex-grow：
设置或检索弹性盒的扩展比率,根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间
.item {
  flex-grow: <number>; /* default 0 */
}
align-self：弹性盒子元素在侧轴（纵轴）方向上的对齐方式，可以覆盖父容器align-items的设置
.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}

十三、DOM操作：
document对象：：：：
document.location：location属性返回一个只读对象，提供了当前文档的URL信息
document.location.href // "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"
// 优先从服务器重新加载
document.location.reload(true)
// 优先从本地缓存重新加载（默认值）
document.location.reload(false)
虽然location属性返回的对象是只读的，但是可以将URL赋值给这个属性，网页就会自动跳转到指定网址。
document.location = 'http://www.example.com';
// 等价于
document.location.href = 'http://www.example.com';

除了document对象，在DOM中最常用的就是Element对象了，Element对象表示HTML元素。
----------------------------------------------------------------------------------------------------------------------------
element对象：：：：
13.1、创建元素：
13.1.1、createElement()  createElement方法用来生成HTML元素节点。
var newDiv = document.createElement("div");
13.1.2、createTextNode()  createTextNode方法用来生成文本节点，参数为所要生成的文本节点的内容。
var newContent = document.createTextNode("Hello");
13.2、查询元素：
getXXXByXXX 获取的是动态集合，querySelector获取的是静态集合。
13.3、添加元素到dom
13.3.1、appendChild()  在元素末尾添加元素
var newDiv = document.createElement("div");
var newContent = document.createTextNode("Hello");
newDiv.appendChild(newContent);
13.3.2、insertBefore()   在某个元素之前插入元素
13.4、替换元素：
replaceChild()   replaceChild()接受两个参数：要插入的元素和要替换的元素
newDiv.replaceChild(newElement, oldElement);
13.5、删除元素：
removeChild()   删除元素使用removeChild()方法即可
parentNode.removeChild(childNode);
13.6、克隆元素：
cloneNode()    方法用于克隆元素，方法有一个布尔值参数，传入true的时候会深复制，也就是会复制元素及其子元素（IE还会复制其事件），
false的时候只复制元素本身
node.cloneNode(true);

13.7、属性操作：
getAttribute()  node.getAttribute('id');获取元素的attribute值
createAttribute()  attribute = document.createAttribute(name);
setAttribute()  用于设置元素属性
romoveAttribute()  node.removeAttribute('id');

13.8、样式操作：
可修改元素的 style 属性，修改结果直接反映到页面元素
document.querySelector('p').style.color = 'red'

获取样式 getComputedStyle    使用getComputedStyle获取元素计算后的样式，不要通过 node.style.属性 获取
var node = document.querySelector('p')
var color = window.getComputedStyle(node).color
样式的改变尽量使用 class 的新增删除来实现

13.9、页面高度：
element.clientHeight content+padding 不包括border
element.offsetHeight  包括border但是不包括margin
document.body.clientHeight
document.body.offsetHeight
element.scrollHeight 元素滚动内容的总长度。如果元素没出现滚动条， scrollHeight等于 clientHeight
element.scrollTop 滚动的高度
window.innerHeight 窗口的高度

十一、BOM操作：浏览器对象模型
11.1、BOM的核心是window对象  所有在全局作用域中声明的变量、函数、对象都会作为window的属性和方法
var age = 24;
function printName(){
    console.log(age);
}
console.log(window.age);
window.printName();
11.2、window.innerHeight属性，window.innerWidth属性
这两个属性返回网页的CSS布局占据的浏览器窗口的高度和宽度，单位为像素。很显然，当用户放大网页的时候（比如将网页从100%的大小放大为200%），
这两个属性会变小。注意，这两个属性值包括滚动条的高度和宽度。

11.3、scrollX、scrollY

scrollX：滚动条横向偏移
scrollY：滚动条纵向偏移
这两个值随着滚动位置变化而变化

scrollTo、scrollBy、scroll

我们也可以通过方法scrollTo或者scroll方法改变滚动条位置到指定坐标

window.scrollTo(0, 300); // 滚动条移动到300px处
两个参数分别是水平、垂直方向偏移

scrollBy可以相对当前位置移动滚动条，而不是移动到绝对位置

scrollBy(0, 100); // 滚动条下移100px
11.4、screen

screen对象包含了显示设备的信息。

// 显示设备的高度，单位为像素
screen.height
// 1920

// 显示设备的宽度，单位为像素
screen.width
// 1080
一般使用以上两个属性，了解设备的分辨率。上面代码显示，某设备的分辨率是1920x1080。除非调整显示器的分辨率，否则这两个值可以看作常量，
不会发生变化。显示器的分辨率与浏览器设置无关，缩放网页并不会改变分辨率。

十四、事件模型
14.1、在DOM2级中使用addEventListener和removeEventListener来注册和解除事件（IE8及之前版本不支持）。这种函数较之之前的方法好处是
 一个dom对象可以注册多个相同类型的事件，不会发生事件的覆盖，会依次的执行各个事件函数。
  click.addEventListener('click',function(){
        alert('click one');
    },false);第三个参数true代表捕获事件，false代表冒泡事件
14.2、 DOM2级事件模型
假设我们点击了ID为inner的div，那么此时的事件流程就是，首先执行捕获阶段：document-html-body-div(outer)。
然后执行冒泡阶段：div(inner)-div(outer)-body-html-document。

十五、AJAX
ajax高并发处理：
var d1 = $.Deferred();  
var d2 = $.Deferred();  
  
function async1(){  
    d1.resolve( "Fish" );  
}  
  
function async2(){  
    d2.resolve( "Pizza" );  
}  
  
$.when( d1, d2 ).done(function ( v1, v2 ) {  
    console.log( v1 + v2 + '已完成');  
});  

十六、面向对象：
