一、安装koa2（node >v7.6 ,npm >3.x）
1.1、新建一个空的项目文件夹
npm init -y 初始化文件夹
npm install koa --save 下载安装koa
1.2、node程序热更新：nodemon
npm install nodemon -g
安装完成后用：nodemon indes.js 来启动服务器

二、知识点
2.1、async、await使用：
async/await 的特点：可以让异步逻辑用同步写法实现
                  最底层的await返回需要是Promise对象
                  可以通过多层 async function 的同步写法代替传统的callback嵌套
2.2、koa-router：安装路由   npm install --save koa-router
const Koa = require('koa');
const app = new Koa();  // 实例化的时候要加括号Koa()
const Router = require('koa-router');
let home = new Router();  // 实例化的时候要加括号Router()
let page = new Router();
page.get('/404',async(ctx,next) =>{  // 在这的get()方法是调用的构造函数上的方法
    ctx.body = `404 page!`
});
// 装载所有子路由
let router = new Router()  
router.use('/', home.routes(), home.allowedMethods())  // 将定义好的两个子路由都挂载到router主路由上
在上面路由的参数：home.allowedMethods()用来规定home子路由的请求方式（get、post、。。。），如果不加则路由也可以正常跳转
router.use('/page', page.routes(), page.allowedMethods())  // 将定义好的两个子路由都挂载到router主路由上

// 加载路由中间件
app.use(router.routes()).use(router.allowedMethods())  // 将主路由挂载到app对象上（注册到app对象上）

2.3、请求数据处理：
node中在字符串里面拿到变量值需要使用${name}: ctx.response.body = `<h1>welcome ${name}</h1>`

2.3.1、get请求：
在koa中，获取GET请求数据源头是koa中request对象中的query方法或querystring方法，query返回是格式化好的参数对象，querystring返回的是请求字符串，
由于ctx对request的API有直接引用的方式，所以获取GET请求数据有两个途径。
1.是从上下文中直接获取
请求对象ctx.query，返回如 { a:1, b:2 }
请求字符串 ctx.querystring，返回如 a=1&b=2
2.是从上下文的request对象中获取
请求对象ctx.request.query，返回如 { a:1, b:2 }
请求字符串 ctx.request.querystring，返回如 a=1&b=2

2.3.2、post请求：
用post请求处理URL时，我们会遇到一个问题：post请求通常会发送一个表单，或者JSON，它作为request的body发送，但无论是Node.js提供的原始request对象，
还是koa提供的request对象，都不提供解析request的body的功能！
所以，我们又需要引入另一个middleware来解析原始request请求，然后，把解析后的参数，绑定到ctx.request.body中。
koa-bodyparser就是用来干这个活的。
nom install koa-bodyparser --save
// 当POST请求的时候，中间件koa-bodyparser解析POST表单里的数据，并显示出来：ctx.request.body 里面存的就是{"userName":"a","password":""}，
需要哪个值直接ctx.request.body.userName去取值。
引入const bodyParser = require('koa-bodyparser');然后在router之前被注册到app对象上（只要在router注册到app上之前注册就行）：
app.use(bodyParser());。
------------------------------------------------------------------------------------------------------------------------------
const Koa = require('koa');
const Router = require('koa-router');
const app = new Koa();
const badyParser = require('koa-bodyparser');
const router = new Router();

router.get('/send',async(ctx,next)=>{
    let html = `
    <h1>请填写下面表单并提交</h1>
    <form method="post" action="/receive">
        <p>userName</p>
        <input type="text" name="userName">
        <p>password</p>
        <input type="password" name="password">
        <input type="submit" value="submit">
    </form>
    `;
    ctx.response.body = html;
});
router.post('/receive',async(ctx,next)=>{
   let name = ctx.request.body.userName || '';
   let password = ctx.request.body.password || '';
   console.log(`${name} && ${password}`);
   if (name === 'a' && password === '1234'){
       ctx.response.body = `<h1>welcome ${name}</h1>`
   }else {
       ctx.response.body = `
       <h1>请重新核对您的账号和密码并重新登录</h1>
       <a href="/send">传送地址</a>
       `
   }
});
app.use(badyParser());
app.use(router.routes());

app.listen(3000,()=>{
    console.log('server has started at port 3000')
});
-----------------------------------------------------------------------------------------------------------------------------
2.4、静态资源加载：koa-static
一个http请求访问web服务！！静态资源！！，一般响应结果有三种情况：
                                                    访问文本，例如js，css，png，jpg，gif
                                                    访问静态目录
                                                    找不到资源，抛出404错误
           
安装koa-static中间件：npm install koa-static --save
Koa静态文件指定中间件Koa-static，npm install Koa-static之后就可以使用Koa-static负责托管 Koa 应用内的静态资源。
映射了静态文件目录，引用的时候直接去该目录下寻找资源，会减少一些消耗。（不知道讲的准确不准确，只是个人的理解）指定public为静态文件目录的代码如下

    var staticServer = require('koa-static');
    var path = require('path');
    router.get('/static',async(ctx,next)=>{    
        ctx.response.body = `<h1>静态文件</h1>
            <a href="/image/3.jpg">点击显示第三张图片</a>        
            `
        });
    const staticPath = './static';
    app.use(staticServer(
        path.join(__dirname,staticPath)
    ));
当static注册到app上之后就可以通过url直接访问放在服务器里面的静态文件。注意路径不包括/static。请求静态资源的路径是：
http://localhost:3000/image/3.jpg

2.5、文件上传
