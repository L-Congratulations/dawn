十七、用axios进行ajax跨域请求:
用vue-cli配置跨域：
在config\index.js中配置
proxyTable: {
        '/api': {
          target: 'http://192.168.1.106:8081/api',	  
	  在这的auth是非必须的，http://192.168.1.106:8081/api他的意思是在实际url中api代表：http://192.168.1.106:8081/api
	  而没有的时候：http://192.168.1.106:8081/在实际的url中api代表：http://192.168.1.106:8081/
          changeOrigin: true,
          pathRewrite: {
            '^/api': ''
          }
        }
    },
 然后在axios中   
  this.$refs[formName].validate((valid) => {
          if (valid) {
            console.log('开始发送ajax');
//            this.$router.push({path:'/'})
            let str = 'userName=admin&password=admin'
            this.$http({
              method:'post',            
              url:'/api/auth',   // 此时请求的实际路径为：http://192.168.1.106:8081/auth
              data: str
            }).then(response=>{
              console.log('请求成功')
              console.log(response);
              this.$router.push({path:'/'})
            }).catch(function (error) {
              console.log(error);
            });
          } else {
//            console.log('表单格式有问题');
//            console.log(md5('aaaa'));
            return false;
          }
        })
一定要明确传参方式，axios是option形式传参（http://www.jb51.net/article/118030.htm）
因此官方写的那种data传参形式要修改成：let str = 'userName=admin&password=admin'格式才能传参成功
也可以用第三方库qs等吧对象自动转成如上字符串


十六、vue-router在路由中传参：
首先在链接里面写入需要传入的键值对{path:'/listDetail',query:{id:index,fatherName:list.fatherName}}这种写法不需要重新配置router的index.js文件
	<router-link :to="{path:'/listDetail',query:{id:index,fatherName:list.fatherName}}">
然后通过[this.$route.query.id]获取传递的参数：
	listDetail:JSON.parse(localStorage.getItem('msg')).Home[this.$route.query.fatherName][this.$route.query.id],
十五、修改列表中被点击元素的属性：
要精确修改每个被点元素需要使用index作为判断的变量：
<span v-for="(item,index) in filterList.income.options"
              @click="incomeValue($event,index)"
              :class="{ 'static': isActive === index}">{{item}}</span>
	       然后通过改变	isActive === index是true还是false来动态修改static这个class是否添加到dom元素中      
 在data里面定义一个初始值：
  isActive1:0,
      isActive2:0,
      isActive3:0,
 通过改变this.$data.isActive1 = index;来确定是哪个属性改变     
 incomeValue:function (e,index) {
      this.$data.isActive1 = index;
    },
十四、vue获取当前元素的所有属性：
@click="getOption($event)"
 methods:{
    getOption:function (e) {
      console.log(e.target)    
    }
  }
十三、路由传参和组件接收参数：
一个组件在不同路由里面重复利用的时候，就需要根据路由去修改组件里面的值：
因此就涉及到一下几个问题：
13.1、通过不同的路由获取不同的参数：
有两种方法可以在子页面获取到路由中的信息
（1）、直接通过this.$route来获取路由中包含的信息。如：console.log(this.$route.name);
（2）、通过vue-router封装好的方法：to.path来获取到路由中的信息。如：
	beforeRouteEnter   (to, from, next) {
	    console.log(to.name);
	    }
13.2、将从路由中获取到的参数传递给vue实例中的data。因为组件在被多次调用的时候只会在第一次调用时实例化，非首次调用都不会重新实例化，所以不能
通过vue的生命周期钩子来完成数据的动态更新。
因此要使用vue-router的钩子函数来达到效果。
但是beforeRouteEnter钩子在执行的时候vue实例还没创建，因此无法直接调用到vue实例中的data，只能用next参数调用方法达到目的：
 beforeRouteEnter   (to, from, next) {
    console.log(to.name);
    let lists = JSON.parse(localStorage.getItem('msg')).Home[to.name];
    next(vm => vm.setData(lists)); // // 通过 `vm` 访问组件实例
  },
//  beforeRouteUpdate (to, from, next) { //
//    this.list = null
//    list = JSON.parse(localStorage.getItem('msg')).Home[to.name];
//    next(this.setData(list))
//  },
  methods:{
    setData(list){  // 在这定义setData来完成对vue实例中的参数赋值的目的
        this.list = list
    }
  }
十二、父子组件信息传递
在父组件：
data里面添加要传递的数据：
 data(){
    return{
	investmentProList:JSON.parse(localStorage.getItem('investmentProList')), // investmentProList结果是一个对象
	}
	}
 然后将数据绑定到子组件上：
 <brand-list :message=investmentProList.reZone></brand-list> // 同一个子组件渲染到不同的地方的时候可以通过绑定不同的数据来达到效果
 			// 在这的message是子组件接收时的key
 <brand-list :message=investmentProList.firstZone></brand-list>
 
 在子组件接收数据并把数据填充到dom中：
 props:['message'], // 通过peops及与父组件约定好的key来接收父组件传递的数据。props是和data并列存在的，也是双向绑定
  data(){
    return{}
    }
    <div class="company" v-for="list in message">  // 将接收到的message填入到dom中
十一、本地存储：
http://blog.csdn.net/hbcui1984/article/details/8466743
保存数据：localStorage.setItem(key,value);
读取数据：localStorage.getItem(key);
删除单个数据：localStorage.removeItem(key);
删除所有数据：localStorage.clear();
得到某个索引的key：localStorage.key(index);
json字符串和对象互转
JSON.parse(jsonString);    //转换为json对象
JSON.stringify(jsObject); //转换为json类型的字符串　　
十、vuex
引入vuex： npm install vuex --save
在src目录下新建文件夹vuex
在vuex文件夹下新建store.js
在store.js文件下：
import Vue from 'vue'
import Vuex from 'vuex'
import state from './state' // 对应的state
import mutations from './mutations'
Vue.use(Vuex);
export default new Vuex.Store({
  state,
  mutations
})
在main.js文件里面加入
import Vuex from 'vuex'
import store from './vuex/store'
Vue.use(Vuex)
并在vue实例中引入store
new Vue({
  el: '#app',
  router,
  store,
  template: '<App/>',
  components: { App }
})
在文件中引入数据和方法：
{{$store.state.count}}引入共享数据
 <button @click="$store.commit('add')">+</button>引入方法
 
 在js中引入vuex的state：
  methods:{
    getOption:function (e) {
      console.log(e.target.innerText)
      this.$store.state.filterLists.income = e.target.innerText
      console.log(this.$store.state.filterLists.income)
    }
  }
 
 
 
九、element的表单验证：
http://www.rxshc.com/78.html
八、使用阿里的iconfont图标：http://www.iconfont.cn
加入库----》下载代码----》在项目中引入iconfont.css文件-----》<i class="icon iconfont icon-yonghu"></i>引入icon图标
七、vue中使用ajax进行数据请求
http://blog.csdn.net/qq_26744901/article/details/69572204
7.1、首先npm install axios -S 将axios导入到项目仓库
然后将axios引入到项目中：
import axios from 'axios'
Vue.prototype.$http = axios;
并在原型连上进行修改

五、vue常见问题解决方案：
6.3、vue子路由和子路由重定向
{
      path:'/help',
      name:'Help',
      component:RebateHelp,
      redirect:'/help/first', // 重定向路由，进入路由默认显示的页面
      children:[
        {
          path:'/help/first',
          component:First
        },
        {
          path:'/help/second',
          component:Second
        },
      ]
    }
    子页面渲染在父页面的router-view标签里面
6.2、vue组件中引入其他组件：
import RebateHeader from './common/RebateHeader.vue'
export default {
  data(){
    return{

    }
  },
  components:{
    'RebateHeader':RebateHeader
  }
}
6.1、关于element中icon图标显示不出来的解决办法：将css的cdn路径https://unpkg.com/element-ui/lib/theme-default/index.css
下的内容拷贝覆盖本地node_modules里面对应的index.css文件。

5.1、使用属性绑定v-bing:src='imgUrl'传递图片路径的时候因为编译图片路径报错：
    将图片存放在根目录下的static文件夹，然后设置imgUrl的路径为static文件夹下的图片路径imgUrl:'/static/logo1.png'
5.2、在布局的时候需要空的div做占位的时候在里面填写内容&nbsp;来做填充
5.3、v-for：<span v-for="link in footerTip.links">将整个span进行循环n次，循环的数据可以是对象或者数组
        <div class="customerContent" v-for="(customer,index) in customer.customers" >
        获取到当前是第几次循环使用index获取：v-for="(customer,index) in customer.customers"
        使用三元运算符判断奇偶数，并执行相应的操作： <el-row v-bind:class="(index % 2 == 1) ? even : ''">
        绑定的class样式名要在data中先声明才能生效：return{even:'even',}
5.4、使用css将图片置灰：
.gray { 
    -webkit-filter: grayscale(100%);
    -moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);
    
    filter: grayscale(100%);
	
    filter: gray;
}
<img src="mm1.jpg" />
<img src="mm1.jpg" class="gray" />
一、Vue脚手架搭建项目：vue init webpack vueapp  cd vueapp npm install
四、webstrom配置vue开发环境：
4.2、在webstrom里面配置babel：http://blog.csdn.net/peade/article/details/76522177
4.4、在vue文件中使用sass：
首先安装sass：先安装Ruby，然后在命令行输入：gem install sass 安装sass
然后安装webpack打包sass模块：npm install node-sass --save-dev（
                                            在安装node-sass的时候因为被墙安装不上，需要安装淘宝镜像来安装
                                            npm install -g cnpm --registry=https://registry.npm.taobao.org  （安装淘宝镜像）
                                            cnpm install node-sass  --save （使用淘宝镜像安装node-sass））
                            npm install sass-loader --save-dev
在webpack.base.config.js的rules数组中加入：
                                        {
                                          test: /\.scss$/,
                                          loaders: ["style", "css", "sass"]
                                        },
在.vue文件中的style文件设置成：<style lang="sass" >(如果设置成scss则是scss语法)                                       
4.5、在vue中引入elementUI：
先安装element：npm i element-ui -S
在入口文件main.js中引入element库：import Element from 'element-ui'
                                import 'element-ui/lib/theme-default/index.css'
                                Vue.use(Element);
安装webpack打包element的依赖包：npm install style-loader --save-dev
                                npm install css-loader --save-dev
                                npm install file-loader --save-dev（如果安装时报错选择以管理员身份运行命令行）
在 webpack.config.js 中的 rules 数组加入以下配置：
                                        {
                                          test: /\.css$/,
                                          include: [  
                                            /src/,//表示在src目录下的css需要编译  
                                            '/node_modules/element-ui/lib/'   //增加此项  
                                          ],  
                                          loader: 'style-loader!css-loader'
                                        },
                                        {
                                          test: /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/,
                                          loader: 'file-loader'
                                        },
4.3、添加Sass支持：先安装Ruby，然后在命令行输入：gem install sass 安装sass-》在webstrom中配置file watchers-》添加sass模块，
program中路径填写ruby下的sass.bat


二、用koa2搭建web服务器：
2.1、初始化项目：npm init -y(会创建一个包含默认配置的package.json文件)
2.2、安装koa2：npm i koa --save
2.3、安装koa-router： npm i koa-router --save
2.4、处理get请求：
const Koa = require('koa');
const router = require('koa-router')(); // 注意require('koa-router')返回的是一个函数
const app = new Koa();

app.use(async(ctx,next) =>{
    // console.log(ctx.request);
    await next();
});

router.get('/hello/:name', async(ctx,next) =>{
    let name = ctx.params.name;
    ctx.response.body = `<h1> hello, ${name}!`;
});
router.get('/', async(ctx, next) =>{
    ctx.response.body = '<h1>home</h1>';
});

app.use(router.routes()); // 将路由功能注册到app上

app.listen(3000);
console.log('app has started at port 3000...');
2.5、处理post请求：
用post请求处理URL时，我们会遇到一个问题：post请求通常会发送一个表单，或者JSON，它作为request的body发送，但无论是Node.js提供的原始request对象，
还是koa提供的request对象，都不提供解析request的body的功能！所以，我们又需要引入另一个middleware来解析原始request请求，然后，
把解析后的参数，绑定到ctx.request.body中。
npm i koa-bodyparser --save
这个中间件koa-bodyparser必须在router之前被注册到app对象上。
const Koa = require('koa');
const router = require('koa-router')(); // 注意require('koa-router')返回的是一个函数
const bodyParser = require('koa-bodyparser');
const app = new Koa();


app.use(async(ctx,next) =>{
    // console.log(ctx.request);
    await next();
});

router.get('/hello/:name', async(ctx,next) =>{
    let name = ctx.params.name;
    ctx.response.body = `<h1> hello, ${name}!`;
});
router.get('/', async(ctx, next) =>{
    ctx.response.body =
        `<h1>home</h1>
        <form action='/signin' method='post'>
            <p>name:<input name="name" value="koa"/></p>
            <p>password:<input name="password" type="password"/></p>
            <p><input type="submit" value="submit"/></p>
        </form>`;
});
router.post('/signin', async(ctx,next) =>{
    let name = ctx.request.body.name || '';
    let password = ctx.request.body.password || '';
    console.log(`登录的名字是:${name},密码是：${password}`);
    if (name === 'koa' && password === '12345'){
        ctx.response.body = `<h1>welcome,${name}!</h1>`
    }else {
        ctx.response.body = `<h1>名字或密码错误，请重新核对</h1>
        <p><a href='/'>try again</a></p>`
    }
});
app.use(bodyParser());
app.use(router.routes());

app.listen(3000);
console.log('app has started at port 3000...');

三、链接数据库：


