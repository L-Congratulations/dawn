一、项目初始化
npm环境初始化、搭建项目骨架、搭建客户端骨架、客户端webpack配置（本地调试运行）

1.1、初始化项目为npm项目
npm init

1.2、搭建项目骨架
client（首先就是客户端代码）
server（然后是服务端的代码）
build（然后是对代码进行打包压缩等加工的脚本）
dist（然后是存放编译好的代码的文件）

1.3、搭建客户端骨架
因为是前端开发，所以客户端是主体，然后针对客户端进行一系列配置。
index.js（整个客户端的入口文件）
views（首先是视图）
stores（然后是数据）
config（然后是route等路由配置）
components（然后是一些公共组件和第三方配置文件组件等）

1.4、搭建简单的react项目
（1）npm i react react-dom -S

（2）在views文件夹里面创建一个App.jsx文件
import React,{Component} from 'react'
class App extends Component{
// 因为class类继承的Component是一个函数，而不是一个对象，所以不需要用‘，’进行隔离
    render() {
        return(
            <div>
                入口
            </div>
        )
    }
}
export default App

（3）在index中将react代码注入到真实dom中
import React from 'react'
import ReactDom from 'react-dom'
import App from './views/App.jsx'
ReactDom.render(<App/>,document.body)

到这简单的react项目就搭建完成了，然后我们需要在客户端进行调试，所以我们需要使用webpack将react代码进行编译打包等操作

1.5、使用webpack编译打包react客户端代码
（1）npm i wepack -D（因为是架构工具，所以不作为项目依赖安装）

（2）在build文件夹中创建webpack的配置文件
因为webpack的配置文件是node的执行脚本，所以按照node的语法规范来编写（Node应用由模块组成，采用CommonJS模块规范。根据这个规范，每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个【对象】，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性）。module.exports 初始值为一个空对象 {}
exports 是指向的 module.exports 的引用
require() 返回的是 module.exports 而不是 exports

为了保持代码的严谨性（不同系统，不同编辑器之间相对路径可能存在差异），所以我们使用path在配置文件中来指明路径。要使用path，首先在使用的文件中载入path包：
const path = require('path')

webpack.config.client.js——：

const path = require('path')
const config = {
    entry:{
        app:path.resolve(__dirname,'../client/index.js')
    },
    output:{
        filename:`[name].[hash].js`,
        path:path.resolve(__dirname,'../dist'),
        publicPath:''
    }
}
module.exports = config

上面是打包的代码，然后我们配置jsx解析的代码

（3）jsx解析配置
npm i babel-loader@7 babel-core -D

然后在项目根目录下新建.babelrc文件，并写入：
{
  "presets":[
    ["es2015",{"loose":true}],
    "react"
  ]
}
presets项是表示babel支持的语法，现在把很多语法（jsx等等）都拆分出去了，所以需要在这指定需要被编译的语法：npm i babel-preset-es2015 babel-preset-es2015-loose babel-preset-react -D

然后在webpack的配置文件中填写解析规则：
const config = {    
    module: {
        rules: [
            {
                test: /.jsx$/,
                loader: 'babel-loader'
            },
            {
                test: /.js$/,
                loader: 'babel-loader',
                exclude: [
                    path.resolve(__dirname,'../node_modules')
                ]
            }
        ]
    }
}

（4）为了防止在引入App.jsx时遗漏掉.jsx报错，我们在配置文件中添加一项：
resolve: {
        extensions: ['.js','.jsx']
    }
// resolve与entry同级，这样在使用es6引入js和jsx文件的时候就可以不用添加后缀了

1.6、在webpack中进行配置，将打包好的js文件自动导入到生成的html中

npm i html-webpack-plugin -D（应该是D，因为只是在文件打包的时候自动生成一次html，生成好了之后线上不需要临时更改）

然后：在webpack配置文件中使用：
const HtmlPlugin = require('html-webpack-plugin')
plugins: [
        new HtmlPlugin()
]
// plugin与entry同级


1.7、编写webpack配置文件的启动命令
我们需要在package.json中配置node命令，让webpack能够引用到这个配置文件并执行：
production（生产）、development（开发）
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build:client": "webpack --mode production --config build/webpack.config.client.js"
  },

在命令行中执行npm run build 命令查看效果，此时dist文件中就会有压缩好的文件

我们需要在浏览器中实时调试代码，所以下面配置客户端热更新等相关内容


二、开发环境下客户端架构完善
UI框架引入、开发环境下客户端热更新

2.1、创建template.html
这样方便我们对html文件进行自定义，同时也方便在服务端渲染的时候进行引用
（1）在client文件夹下创建template.html文件，写入
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<div id="root"><!--App--></div>
</body>
</html>

（2）通过webpack配置项将template.html应用到项目中
plugins: [
        new HTMLPlugin({
            template:path.resolve(__dirname,'../client/template.html')
        })
    ]

（3）将react项目挂载到template.html的root节点上
在index.js中将<App/>,挂在到html的#root节点
ReactDom.render(<App/>,document.getElementById('root'))


2.2、开发时客户端热更新
http://192.168.183.129:8888/
（1）npm i webpack-dev-server -D
webpack-dev-server是webpack的一个插件，作用是在本地开启一个node服务器，这样在浏览器中就可以通过localhost地址来查看调试代码，同时会监听客户端代码的变化并自动刷新浏览器。

因为这个插件已经从webpack中分离出去了，所以我们需要单独安装一次。

（2）在webpack配置文件中定义一个环境变量，用来区分是生产环境的代码还是开发环境下的代码，从而避免在环境切换的时候发生冲突。

const isDevelopment = process.env.NODE_ENV === 'development'
// process是nodejs的一个全局变量，我们可以通过process.env属性返回
// 一个包含用户环境信息的对象,在这的NODE_ENV变量是我们在执行npm run build 
// 的时候手动传入通过cross-env传入，默认的--mode参数我们在process.env中并不能获取到

（3）在开发环境下给config对象添加devServer配置项：
if(isDevelopment){
    config.devServer={
        host:'0.0.0.0',
        // host设置成这样使用localhost和ip访问的时候都能访问到
        port:'8888',
        overlay:{errors:true},
        publicPath: '/public/',
        // 注意我们在这使用了/public/，因此output的publicPath配置项要改成一样的，否则会找不到        
           对应的资源
        historyApiFallback:{
            index:'/public/index.html'
        }
    }
}


（4）编写dev-server的启动命令
因为我们已经区分了环境变量，所以我们需要在启动的命令里面将环境变量传递进去，那样才会执行对应的代码，为了保证在不同操作系统下不出问题，我们使用cross-env这个包来完成：
npm i cross-env -D

然后在package.json中添加命令：
"dev:client": "cross-env NODE_ENV=development webpack-dev-server --mode development --config build/webpack.config.client.js",
而且在这--mode的参数必须有而且只能是development，否则会报warning

在这我们要注意在运行npm run dev:client之前检查项目源代码中是否包含dist文件夹，如果有的话我们要删除，这是因为webpack-dev-server会自己启动一个node服务器，他会在电脑内存中生成dist文件，如果项目源码中就包含dist文件那么会造成冲突。


删掉项目中的dist目录，运行：npm run dev:client


2.3、在客户端引入materialUI框架
materialUI有完整的服务端渲染配置也解决了css命名的问题
（1）npm i @material-ui/core @material-ui/icons -S

（2）在客户端中使用UI组件
注意：我们使用哪个组件就精确引入哪个组件，这样可以有效减小项目体积：
import withStyles from '@material-ui/core/styles/withStyles'
import Button from '@material-ui/core/Button'
<Button color='secondary'>按钮</Button>

（3）使用自定义样式
withStyles：import withStyles from '@material-ui/core/styles/withStyles'

定义一个样式变量用来存放自定义的样式：
const styles ={
    list:{
        margin:20
    }
}

然后使用withStyles，将样式变量和组件建立联系：
export default withStyles(styles)(HomePage)

然后将样式导入到render函数中，并使用：
const {classes} = this.props

className={classes.list}

同时引入多个class样式：（这个写法有问题，另外一个写法在完整网站里面，后面再探讨，先进行下面的步骤）
classes={{
                                    root: classes.inputRoot,
                                    input: classes.inputInput,
                                }}


2.4、在react项目中使用img:
（1）首先要在webpack的配置文件中配置img的loader：
npm i img-loader url-loader -D
{
                test: /\.(jpeg|jpg|png|gif|svg)$/i,
                use: [
                    'url-loader?limit=10000',
                    'img-loader'
                ]
            },

（2）然后还要安装file-loader：
npm i file-loader -D
{
                test: /\\.(eot|woff|woff2|ttf)([\\?]?.*)$/,
                loader: "file-loader"
            }

（3）然后在需要图片的文件中将图片导入：
import img2 from '../../static/2.jpg'
import img3 from '../../static/3.jpg'
import img5 from '../../static/5.jpg'
import img6 from '../../static/6.jpg'

（4）然后在对应位置使用：
<div>
                        <img src={img4}/>
                        <div>1</div>
                    </div>

此时图片才能正常的在项目中显示，此外还有需要优化的就是图片的打包压缩问题。


三、客户端项目完善
store、路由配置

四、服务端
