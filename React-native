其实知识这东西永远都是学不完的,你会的比别人多点,别人有一天也会超过你的,所以知识改变命运这种说法是并不正确的,
知识在60-70年代可以改变命运,这句话也是李嘉诚说的确实符合,但是现在获取知识的途径太多了,只要你想学你永远都学不完,
然而这并没有什么卵用,对于你的命运,只是你工作的可以好一点而已,每月可以多拿一千两千块钱,你还是娶不到媳妇,买不起房.
真正改变命运的不是知识,而是智慧,有一千种成功的方式,就看你有没有动脑子去想,有人想过但被各种困难阻碍,这种属于嘴上的智慧.




三十、redux：
30.1、首先下载引入依赖文件：
npm install --save redux 【redux的包】
npm install --save react-redux  【react-redux是redux需要依赖的包】
npm install --save redux-thunk   【redux-thunk是用来让redux有异步的action事务】

30.2、建立项目结构目录：
根目录下新建redux文件夹
redux文件夹内包含action文件夹，reducers文件夹，store文件夹,constant文件夹
action文件夹内包含各个业务逻辑处理的action，承接的是页面用户操作传递过来的函数Login.js,Register.js等
reducers文件夹内包含Index.js和LoginReducers.js
store文件夹内包含 configuerStore.js
constant文件夹包含定死的字符串，作为标识ActionTypes.js
Redux三个最重要的概念：action，reducer，store。我们一步步看实例如何实现。
30.3、Action：是用户触发某个动作之后执行的实际代码，通过  dispatch将用户的操作引到知action：
                            onPress={()=>{
                                        dispatch(performLoginAction(this.state.username,this.state.password))
                                    }}
                                    
Action中主要就是触发事件所执行的逻辑---
首先引入了动作执行的type：ActionTypes
然后如：
import * as types from '../constants/ActionTypes';

// 模拟服务器返回的用户信息
let user = {
    'name': 'admin',
    'age': '24'
}

// 执行登录
export function doLogin() {
    return dispatch = >{
        dispatch(isLogining());
        // 模拟用户登录
        let result = fetch('https://github.com/').then((res) = >{
            dispatch(loginSuccess(true, user));
        }).
        catch((e) = >{
            dispatch(loginSuccess(false, null));
        });
    }
}

// 正在登录
function isLogining() {
    return {
        type: types.LOGIN_IN_DOING
    }
}

// 登录完成
function loginSuccess(isSuccess, user) {
    return {
        type: types.LOGIN_IN_DONE,
        isSuccess: isSuccess,
        user: user
    }
}

30.4、export和export default的区别：
//export和export default的区别是前者可以导出多个后者只能导出一个
    // export导出：
    // export const str = 'hello world'
    //
    // export function f(a){
    //     return a+1
    // }
    // import对应的导入：
    // import { str, f } from 'demo1' //也可以分开写两次，导入的时候带花括号
    //
    // export default导出：
    // export default const str = 'hello world'
    // import对应的导入：
    // import str from 'demo1' //导入的时候没有花括号
    
30.5、登录的action：
// 在这编写执行login动作的逻辑代码，
// 登录页通过onPress事件，使用dispatch方法将登陆操作传递到这个页面，
// 这其实是对login操作动作根据结果执行不同的action（动作的下发），action的具体操作在reducer中
import * as types from '../constants/ActionTypes'
let user={
    'name':'admin',
    'age':24
};
export function doLogin() {
    return dispatch =>{
        dispatch(isLogining()); // 发出一个action，表示正在登陆
        let result = fetch('https://github.com/').then((res)=>{
            // 使用fetch进行ajax请求，请求成功之后执行dispatch发出一个action，表示登录成功
            dispatch(loginSuccess(true,user)); // 发出一个action，并把服务器返回来的数据发出去
            // 在这的user是一个模拟的服务器返回来的对象。如果是ajax则传res.data.userMsg
        }).catch((err)=>{
            dispatch(loginSuccess(false,null)); // 如果请求失败会发送一个提示错误的结果
        })
    }
}
function isLogining() {
    return{
        type:types.LOGIN_IN_DOING
    }
}
function loginSuccess(isSuccess,user) {
    return{
        type: types.LOGIN_IN_DONE,
        isSuccess:isSuccess,
        user:user
    }
}

// 在action中，通过dispatch将内容传递给reducer，也就是接下来的执行逻辑是reducer

30.6、登录的reducer：
// 在这承接actions中的Login.js，
// 在这的逻辑其实就是对action的处理，负责返回新的状态函数，这也是reducer存在的作用

import * as types from '../constants/ActionTypes'

// 根据数据结果给数据进行初始化
// 登录操作有登录状态status，是否登录成功，和用户信息三个值
const initialState = {
    status:'init',// init,doing,done
    inSuccess:false,
    user:null
};

export default function loginIn(state=initialState,action) {// 这的action参数对应的是
    // actions中Login.js 里面的：
    // dispatch(loginSuccess(true,user));
    // function loginSuccess(isSuccess,user) {
    //     return{
    //         type: types.LOGIN_IN_DONE,
    //         isSuccess:isSuccess,
    //         user:user
    //     }
    // }
    // 这个action参数则对应的就是函数loginSuccess(true,user)执行的结果，也就是
    //     {
    //         type: types.LOGIN_IN_DONE,
    //         isSuccess:isSuccess,
    //         user:user
    //     }   这个对象。换句话说就是在actions的Login.js里的dispatch最终将loginSuccess
    // 的执行结果传递到了这个页面

    switch (action.type){
        case types.LOGIN_IN_INIT:
            return{
                ...state,
                // es6语法，执行的结果就是把state里面所有的键值对列出来，如
                // loading:false, data:''
            };
        case types.LOGIN_IN_DOING:
            return{
                ...state,
                status:'doing'
            };
        case types.LOGIN_IN_DONE:
            return{
                ...state,
                status:'done',
                isSuccess:action.isSuccess,
                user:action.user
            };
        default:
            return state;
    }
}

// 由于redux中只允许有一个store，当业务量比较多，我们会使用多个reducer。这时候我们
// 需要把这些reducer组合起来，把他们集中到index中

30.7、将所有reduxer整合的index.js

// 在这个文件里将把所有的reducer整合到一起
import { combineReducers} from 'redux'
import loginIn from './Login'

const rootReducer = combineReducers({
    loginIn
});

export default rootReducer

// 将reducer文件整合之后下一步是store编写


30.8、store的基本写法：

// 这个是store的基本写法
import { createStore, applyMiddleware} from 'redux'
import thunkMiddleware from 'redux-thunk'
import rootReducer from '../reducers/index'

const createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);
// applyMiddleware函数表示将中间件thunkMiddleware应用在redux action过程中
// thunkMiddleware是一个异步中间件
export default function configureStore(initialState) {
    const store = createStoreWithMiddleware(rootReducer,initialState);
    // createStoreWithMiddleware表示用reducer来创建store
    return store;
}

// 接下来将store关联到组件的根目录上，
    
30.9、将store和整个应用关联：
在项目入口文件内：
import { AppRegistry } from 'react-native';
import App from './app/StackNavigator';
import {Provider} from 'react-redux'
import configureStore from './app/redux/store/configureStore'

const store = configureStore();

AppRegistry.registerComponent('reactApp', () =>{
    return(
        <Provider store={store}>
            {/*使用Provider包裹整个程序的入口文件APP，同时将store传递进去*/}
            <App/>
        </Provider>
    )
}

);

30.10、在页面中注册和调用store中的属性和方法：
首先在页面中引入
import { connect} from 'react-redux' // connect(select)(LoginPage)表示LoginPage组件对store的状态感兴趣。
import {doLogin} from '../redux/actions/Login' // 页面中需要调用的函数

function select(store) {
    return{
    // 注意，这里的status对应的是该页面中的变量名：this.props.status,this.props.isSuccess1,this.props.data2
    // store.loginIn.status对应的是reducer对应的变量名，
    // 这段代码的意思是将login的reducer里面所存store的值store.loginIn.status传递到页面中，在页面中的变量名status来存储从store传递过来的值
    // 通过this.props.status取到值
        status:store.loginIn.status,
        isSuccess1:store.loginIn.isSuccess,
        data2:store.loginIn.data
    }
}

export default connect(select)(Mine)  // 将select中的变量绑定到该页面，页面中的status会和store中的store.loginIn.status同步，当store中
// 的值发生改变时，status也会发生改变，
表示Mine会检测store中loginIn.status的状态，当发生改变的时候会刷新Mine页面

获取store中的数据是通过this.props.isSuccess方式获得的，如上所示的代码中select关联的是loginIn对应的state状态，那么this.props.isSuccess
取到的就是store.loginIn.isSuccess,对应的值，当store.loginIn.isSuccess发生改变的时候就会刷新页面，

获取数据并绑定到页面，当数据更新时刷新页面：
function select(store) {
    return{
        status:store.loginIn.status,
        isSuccess:store.loginIn.isSuccess,
        data:store.loginIn.data
    }
}
// export default Mine
export default connect(select)(Mine)
此时已经将login返回的data数据传递到了页面，然后通过
{this.props.data.age}直接取值


二十八、路由传参和 取参



二十七、reactnative本地存储react-native-storage
这是一个本地持久存储的封装，可以同时支持react-native(AsyncStorage)和浏览器(localStorage)。

二十六、textInput样式：
<TextInput
                                        onChangeText={(text) => this.setState({text})}
                                        value={this.state.text}
                                        placeholder='请输入验证码'
                                        underlineColorAndroid="transparent" // 去掉底部下划线
                                    />
二十五、StackNavigator实现自定义导航跳转到任意界面，因为直接通过标签引入的组件没有在navigator里面注册，所以直接引入的无法使用navigator导航



二十四、css命名规范：
1、不同内容使用不同的前缀来进行区分
    /*history*/
    .od_his_dtl_x{}       
    
    /*set meal*/
    .od_set_ml_x{}
    .od_set_ml_lst_x{}
    
    /*pic menu*/
    .od_pic_mu_x{}
    .od_pic_des{}
    
2、面向属性命名
这种命名就是要让你把页面啊设计啊什么的通通塞到马桶里冲走，不要管页面什么位置，什么内容，there is noting, 这儿什么都没有，
既然什么都没有，也就没有了任何限制，

感觉还是加前缀，根据内容命名好
3、尽量无层级，无标签
#test .test{}， ul.test{}，#test ul{} 以及.test{}。
中.test{}是渲染速度最快的
4、可以使用简拼：box_backgroundcolor  box_bg_color


5、命名规则：
页面外围控制整体佈局宽度：wrapper
二十三、react语法笔记
跟据官方教程：
styles和class并列写

render(){
        let activityLists = [
            {
                left:{
                    activityName:'签到',
                    activityIntroduce:'赚泰山币',
                    activityIcon:'',
                    activityDetailLink:''
                },
                right:{
                    activityName:'摇一摇',
                    activityIntroduce:'人品爆发',
                    activityIcon:'',
                    activityDetailLink:''
                }
            },
            {
                left:{
                    activityName:'邀请好友',
                    activityIntroduce:'奖励返现',
                    activityIcon:'',
                    activityDetailLink:''
                },
                right:{
                    activityName:'红包',
                    activityIntroduce:'投资抵现',
                    activityIcon:'',
                    activityDetailLink:''
                }
            }
        ];
        let renderActivity = [];
        for(let i=0;i<activityLists.length;i++){
            renderActivity.push(
                <View style={styles.activityItemWrap}>
                    <View style={styles.activityItem}>
                        <View style={styles.activityNameGroup}>
                            <Text style={styles.activityName}>{activityLists[i].left.activityName}</Text>
                            <Text style={styles.activityIntroduce}>{activityLists[i].left.activityIntroduce}</Text>
                        </View>
                        <View style={styles.activityIcon}>
                            <Image/>
                        </View>
                    </View>
                    <View style={styles.activityItem}>
                        <View style={styles.activityNameGroup}>
                            <Text style={styles.activityName}>{activityLists[i].right.activityName}</Text>
                            <Text style={styles.activityIntroduce}>{activityLists[i].right.activityIntroduce}</Text>
                        </View>
                        <View style={styles.activityIcon}>
                            <Image/>
                        </View>
                    </View>
                </View>
            )
        }
        return(
            <View style={styles.ActivityAreaWrap}>
                {renderActivity}
            </View>
        )
    }

跳转链接写法：
首先在注入TouchableHighlight，onPress事件需要TouchableHighlight等组件来使用
import { Text, TouchableHighlight} from 'react-native'

<TouchableHighlight
                        onPress={() => navigate('Register')}
                        style={{flex:1}}>
                        <View style={styles.activityItem}>
                            <View style={styles.activityNameGroup}>
                                <Text style={styles.activityName}
                                >{activityLists[i].left.activityName}</Text>
                                <Text style={styles.activityIntroduce}>{activityLists[i].left.activityIntroduce}</Text>
                            </View>
                            <View style={styles.activityIcon}>
                                <Image source={require('../img/4.png')} style={styles.activityImage}/>
                            </View>
                        </View>
                    </TouchableHighlight>
              这里  TouchableHighlight需要设置    style={{flex:1}}才能将内容撑开 <View style={styles.activityItem}>的样式不需要加flex：1
二十二、ScrollView能自己撑开高度，前提是外边没有套View标签。
对于视图中ScrollView因为可滑动区会被头部的固定标签往下挤，就是ScrollView滚动高度固定，但是因为头部有固定导航条，吧ScrollView视图向下挤了。
解决方法是style={{backgroundColor:'#ff3adc',marginBottom:50}}设置一个bottom，把style={{backgroundColor:'#ff3adc',marginBottom:50}}的
可视高度缩短到正好能显示的高度。
二十一、flex布局，垂直划分每个模块所占的面积和设置宽度，Image
当父元素有固定高度的时候，将每个子元素的高度设为0，然后通过flexGrow：1方法就可以按比例划分子元素所占父元素的百分比。
如果父元素没有设置高度，那么子元素会直接高度为0，不会显示

设置宽度：需要给父级设置一个flex：1
      <View style={{flex: 1}}>
        <View style={{flex: 1, backgroundColor: 'powderblue'}} />
        <View style={{flex: 2, backgroundColor: 'skyblue'}} />
        <View style={{flex: 3, backgroundColor: 'steelblue'}} />
      </View>

图片宽度自适应：父级设置flexDirection:'row'，然后图片标签设置flex:1，这样图片就会在宽度上100%占据父级宽度，如果想要调整图片大小，可以通过添加
两个占位标签，设置flex：1的比例来进行调整
                <View style={{flexDirection:'row'}}>
                    <Image source={require('../img/2.jpg')}
                    style={{flex:1,height:400}}/>
                </View>
二十、rn中引入icon并使用

十九、布局：
首先return（）中的元素只能有一个，不能同时return多个元素，如果有多个元素需要将其用View标签包裹起来，如：
              <View style={styles.wrap}>
                <Text>
                    我的页面
                </Text>
                <Button
                     onPress={() => navigate('Home')}
                     title="Go to Home"
                 />

                <Register/>

             </View>
 然后所有的布局都需要通过给View设置属性来完成，Text等内置标签使用flexBox属性并不会起作用。因此，如果想给哪个标签定位，就需要在外边先套一层View标签
 定位的方法主要是padding，margin，配合flexBox布局中的：flexDerection:'row'（用来规定是横向布局还是纵向布局，默认是纵向）、
  flexGrow：1（子元素都是1代表平分父元素，占得数值越大则占得空间越大），
十八、Button使用
                <Button
                    onPress={() => navigate('ScrollTab')}
                    title="Go to ScrollTab">

                </Button>
                注意，在<Button></Button>的中间填充的内容无效，真正在button按钮中显示的是title里面的内容。如果没有title在编译运行的时候会报错
                所有内置标签的属性，不需要通过符号来进行区分，比较清晰的做法是新的属性换行写。如下面这种写法是错误的：
                <Button
                    onPress={() => navigate('ScrollTab')};或者,
                    title="Go to ScrollTab">

                </Button>


十七、横向滑动导航：
https://github.com/skv-headless/react-native-scrollable-tab-view

十六、导航栏标题样式调整：
https://reactnavigation.org/docs/navigators/stack
隐藏导航栏header
Home: {
        screen: TabNavigation,
        navigationOptions: {
            header:null
        },
    },
显示导航栏header，并显示固定的提示：
Register:{
        screen: Register,
        navigationOptions:{
            title:'注册'
        }
    },
这样导航头就会显示‘注册’俩字

修改完成之后要重启才会生效

在react-native中修改样式要作用到具体的元素才会生效，没有继承
修改header的样式是：headerStyle
修改header标题的样式是：headerTitleStyle
修改header标题返回按钮的样式是：
Register:{
        screen: Register,
        navigationOptions:{
            title:'注册',
            headerStyle:{
                backgroundColor:'#4a29ff',

            },
            headerTitleStyle:{
                color:'#fff',
                fontSize:12
            }
        }
    },

十五、react-native导航栏：
https://reactnavigation.org/docs/intro/headers
https://reactnavigation.org/docs/intro/quick-start
http://m.blog.csdn.net/qq_24867873/article/details/78607564
注意，导航文件要作为项目的入口文件（在导航页引入各个page页面实现导航效果，其他页面都是作为引用页面导入到导航页的）

首先引入相关的函数和组件：
import React,{ Component} from 'react'
import { View, Text, StyleSheet, Button} from 'react-native'
import { StackNavigator} from 'react-navigation'
import HomeScreen from './pages/HomeScreen'
import Investment from './pages/Investment'
import Find from './pages/Find'
import Mine from './pages/Mine'
然后将页面挂载到导航组件上，并暴露出去：
const RootNavigator = StackNavigator({
    Home: {
        screen: HomeScreen,
        navigationOptions: {
            headerTitle: 'Home',
        },
    },
    Mine: {
        screen: Mine,
        navigationOptions: {
            headerTitle: 'Mine',
        },
    },
});
export default RootNavigator;

需要注意的是，因为要传参，在跳转的页面需要按钮来触发，

                <Button
                    onPress={() => navigate('Mine')}
                    title="Go to Mine">

                </Button>
 这块需要传递一个参数navigate要通过这种方式来传递：               
const {navigate} = this.props.navigation;
注意只要是注册了navigation，就可以通过onPress={() => navigate('Mine')}这种方式来跳转页面

十四、注意点：
元素没在视图中显示出来绝大多数是因为没有高度，因此要在外边套一层有高度的壳子把元素展示出来：
                <View style={{height:30}}>
                    <Text style={styles.noticeStyles}>泰山金融公告</Text>
                </View>
react-native布局只能靠view元素来进行布局，

十三、自定义组件及引用：
自定义组件：和写普通组件一样，需要注意的是自定义的ui dom结构外边要包裹一层<View style={height:200}></view>,最主要的作用就是给组件一个初始化的
高度，否则在引入组件的时候会因为没有高度组件显示不出来。要记住把组件暴露出去export default Banner 这样才能引用的地方找到
return (
            <View style={{height:200}}>
                <Swiper style={styles.wrapper} showsButtons={true}
                        autoplay = {true}
                        buttonWrapperStyle={{height:200}}
                        height={200}
                        paginationStyle={{bottom: 870}}>
                    <View style={styles.slide1}>
                        <Image source={require('../img/logo.png')} style={styles.img}/>
                    </View>
                    <View style={styles.slide2}>
                        <Text style={styles.text}>Beautiful</Text>
                        <Image source={require('../img/logo.png')} style={styles.img}/>
                    </View>
                    <View style={styles.slide3}>
                        <Text style={styles.text}>And simple</Text>
                    </View>
                </Swiper>
            </View>
            )
引用自定义组件：首先就是把需要使用的组件引入到本模块import Banner from './components/Banner'
然后就是直接在组件中引用模块就行，<Banner/>
return(
            <View>
                <Text>泰山金融公告</Text>
                <Banner/>(或<Banner></Banner>)
                <Image source={homeImg} style={{width:193,height:100,backgroundColor: '#3bff20'}}/>
                <Text>泰山金融公告</Text>
                <Text>demo111</Text>
                <Text>ss</Text>
            </View>
        )
十二、真机调试
调试时热更新：抖动手机或者选择menu键调出调试菜单
然后选择Enable Hot Reloading（这个更好用些） 或 Enable Live Reload 因为起作用的时机不同，所以后者会退出app需要重新进入才能按逻辑顺序正常打开更新
完成的app界面

十一、使用flex-box布局
我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。

React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，
而flex也只能指定一个数字值。

react native中有两个基本元素< View >与< Text >，分别类似于web端div和span，用于布局和修饰。需要注意的是，react native不是所有的CSS属性都支持，

十、设置宽高
最简单的给组件设定尺寸的方式就是在样式中指定固定的width和height。React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。
<View style={{width: 50, height: 50, backgroundColor: 'powderblue'}} />
为了使用清晰方便使用：
const styles = StyleSheet.create({
            bigblue:{
                color:'#409EFF',
                fontSize:30,
                fontWeight:'bold',
                width: 100,
                height: 100,
                backgroundColor: '#CBF514'
            },
            red:{
                color:'#f55231'
            }

        });
 这种方式定义更好
 所有的样式都定义在styles里面，包括布局：
        red:{
                color:'#f55231',
                flex:3,
                backgroundColor: '#EFF51C'
            }

九、组件的样式
所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法，
例如将background-color改为backgroundColor。

可以直接在组件中内联使用style属性，如：<Image style={{width :193, height: 110 , marginTop: 100}}/> style为react内置属性因此可以
在任意组件中内联使用，注意对于多个单词组成的属性名要用驼峰方式


style属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组
——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。
实际开发中组件的样式会越来越复杂，我们建议使用StyleSheet.create来集中定义组件的样式。比如像下面这样：

因此规定所有样式都使用StyleSheet.create来创建：
const styles = StyleSheet.create({
  bigblue: {
    color: 'blue',
    fontWeight: 'bold',
    fontSize: 30,
  },
  red: {
    color: 'red',
  },
});

调用的时候直接按照属性调用就行：<Text style={styles.red}>just red</Text>
style内置属性 = 大括号包裹的属性变量
如果引用的style变量是一个数组，那么后声明的会覆盖前边相同的样式<Text style={[styles.red, styles.bigblue]}>red, then bigblue</Text>

class SetStyles extends Component{
    render(){
        const styles = StyleSheet.create({
            bigblue:{
                color:'#409EFF',
                fontSize:30,
                fontWeight:'bold'
            },
            red:{
                color:'#f55231'
            }

        });
        return(
            <View>
                <Text style={styles.red}>just red</Text>
                <Text style={styles.bigblue}>just red</Text>
                <Text style={[styles.red,styles.bigblue]}>just red</Text>
                <Text style={[styles.bigblue,styles.red]}>just red</Text>
            </View>
        )
    }
}
注意：color的值不能是颜色的英文color:'red' 会报错

八、组件的属性（相当于class）
大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。

export default class HelloWorldApp extends Component{
    render(){
        let pic = {
            uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'
        };
        return(
            <Text>Hello world!</Text>,
            <Image source={pic} style={{width :193, height: 110 , marginTop: 100}}/>
        )
    }
}

AppRegistry.registerComponent('HelloWorldApp',() => HelloWorldApp)
// 注册应用(registerComponent)后才能正确渲染
// 注意：只把应用作为一个整体注册一次，而不是每个组件/模块都注册

8.1、首先在创建一个组件的时候变量需要卸载render函数里面，和return并列的位置
return里面只添加需要渲染在页面里面的结构代码，不能将变量写在里面。return返回的就是组件最终需要在页面显示的内容
8.2、请注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，
需要执行后取值。因此我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。

在jsx语句中引用变量的时候需要在变量外边包裹一层{}，这样才能告诉jsx模板我这是引用的变量或者表达式，而不会被解释成其他的内容

8.3、AppRegistry.registerComponent(appKey:string,getComponentFunc:ComponentProvider)  static静态方法，进行注册组件
定义了一个名为HelloWorldApp的新的组件（Component），并且使用了名为AppRegistry的内置模块进行了“注册”操作。

这个先了解，深究后边需要再去详细了解

8.4、
七、编写react-native起步
7.1、首先也是组件的概念，把每一个功能模块封装成一个组件
  而一个App的最终界面，其实也就是各式各样的组件的组合。
7.2、因为是使用的jsx语法(JSX——是一种在JavaScript中嵌入XML结构的语法)，所以所有的代码都包含在js文件内。
7.3、编写一个组件，首先要引入对应 react内置组件如<Text></Text>(它专门用来显示文本)
然后用es6的class语法定义一个组件
class HelloWorldApp extends Component {
  render() {
    return (
      <Text>Hello world!</Text>
    );
  }
}
上面的代码定义了一个名为HelloWorldApp的新的组件（Component）。
组件本身结构可以非常简单——唯一必须的就是在render方法中返回一些用于渲染结构的JSX语句。
7.4、组件编写完成之后要暴露出去，这样才能被其他文件引用
该组件编写在Hello.js的文件中：
export default class HelloWorldApp extends Component{
    render(){
        return(
            <Text>Hello world!</Text>
        )
    }
}
这样在需要使用HelloWorldApp组件的时候直接使用import语法就能引用到import App from './Hello';


六、react-native实现热更新

五、安装react-native时要用java1.8才能启动成功
java1.9累死你启动不起来，各种报错

在调整安卓模拟器输入ip地址和端口号的时候要用英文，否则会报错

四、命令行查看被占用的端口号
输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是49157，首先找到它。
查看被占用端口对应的PID，输入命令：netstat -aon|findstr "49157"，回车，记下最后一位数字，即PID,这里是2720
继续输入tasklist|findstr "2720"，回车，查看是哪个进程或者程序占用了2720端口，结果是：svchost.exe
一、安装官方推荐脚手架：create-react-app
1.1、安装教程：https://www.rails365.net/articles/kai-fa-react-ying-yong-zui-hao-jiao-shou-jia-create-react-app
一、安装模拟器：
下载逍遥安卓模拟器
安装完模拟器后，要使用adb命令Android studio才能识别出来；
打开cmd,输入：adb connect 127.0.0.1:21503（逍遥安卓模拟器的端口号是21503。夜神玩模拟器的端口号是62001。）
connected to 127.0.0.1:21503 就代表连上了
执行下“adb devices”查看下是否有连接设备
二、yarn全局安装不能执行全局命令时：
要安装环境变量：
首先，先查看一下yarn的bin目录，输入yarn global bin
然后在path里面配置上边输出的路径
用yarn下载的包在运行react native init app 报错的解决办法：
在命令行运行下面两句命令：
npm config set registry https://registry.npm.taobao.org  
npm config set disturl https://npm.taobao.org/dist
然后再运行react native init app 就不会报错了
安装完yarn后同理也要设置镜像源：

yarn config set registry https://registry.npm.taobao.org --global
yarn config set disturl https://npm.taobao.org/dist --global


模拟器调试
菜单 》 Dev settings 》 debug server host&。。。》 本地电脑ip+8081端口 192.168.1.101:8081


三、react-native安装教程
3.1、下载Android studio：http://www.android-studio.org/index.php/download
3.2、安装studio：
3.3、项目创建和启动的组合方式
组合1
  create-react-native-app AwesomeProject
  cd AwesomeProject
  npm start
组合2 
react-native init AwesomeProject 
cd AwesomeProject 
react-native run-android

修改react-native启动的端口
react-native start --port 9999
或者通过修改配置文件修改：
http://blog.csdn.net/fengyuzhengfan/article/details/77389953
3.4、

