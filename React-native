十五、react-native导航栏：
https://reactnavigation.org/docs/intro/quick-start
http://m.blog.csdn.net/qq_24867873/article/details/78607564
注意，导航文件要作为项目的入口文件（在导航页引入各个page页面实现导航效果，其他页面都是作为引用页面导入到导航页的）

首先引入相关的函数和组件：
import React,{ Component} from 'react'
import { View, Text, StyleSheet, Button} from 'react-native'
import { StackNavigator} from 'react-navigation'
import HomeScreen from './pages/HomeScreen'
import Investment from './pages/Investment'
import Find from './pages/Find'
import Mine from './pages/Mine'
然后将页面挂载到导航组件上，并暴露出去：
const RootNavigator = StackNavigator({
    Home: {
        screen: HomeScreen,
        navigationOptions: {
            headerTitle: 'Home',
        },
    },
    Mine: {
        screen: Mine,
        navigationOptions: {
            headerTitle: 'Mine',
        },
    },
});
export default RootNavigator;

需要注意的是，因为要传参，在跳转的页面需要按钮来触发，
                <Button
                    onPress={() => navigate('Mine')}
                    title="Go to Mine">

                </Button>
 这块需要传递一个参数navigate要通过这种方式来传递：               
const {navigate} = this.props.navigation;


十四、注意点：
元素没在视图中显示出来绝大多数是因为没有高度，因此要在外边套一层有高度的壳子把元素展示出来：
                <View style={{height:30}}>
                    <Text style={styles.noticeStyles}>泰山金融公告</Text>
                </View>
react-native布局只能靠view元素来进行布局，

十三、自定义组件及引用：
自定义组件：和写普通组件一样，需要注意的是自定义的ui dom结构外边要包裹一层<View style={height:200}></view>,最主要的作用就是给组件一个初始化的
高度，否则在引入组件的时候会因为没有高度组件显示不出来。要记住把组件暴露出去export default Banner 这样才能引用的地方找到
return (
            <View style={{height:200}}>
                <Swiper style={styles.wrapper} showsButtons={true}
                        autoplay = {true}
                        buttonWrapperStyle={{height:200}}
                        height={200}
                        paginationStyle={{bottom: 870}}>
                    <View style={styles.slide1}>
                        <Image source={require('../img/logo.png')} style={styles.img}/>
                    </View>
                    <View style={styles.slide2}>
                        <Text style={styles.text}>Beautiful</Text>
                        <Image source={require('../img/logo.png')} style={styles.img}/>
                    </View>
                    <View style={styles.slide3}>
                        <Text style={styles.text}>And simple</Text>
                    </View>
                </Swiper>
            </View>
            )
引用自定义组件：首先就是把需要使用的组件引入到本模块import Banner from './components/Banner'
然后就是直接在组件中引用模块就行，<Banner/>
return(
            <View>
                <Text>泰山金融公告</Text>
                <Banner/>(或<Banner></Banner>)
                <Image source={homeImg} style={{width:193,height:100,backgroundColor: '#3bff20'}}/>
                <Text>泰山金融公告</Text>
                <Text>demo111</Text>
                <Text>ss</Text>
            </View>
        )
十二、真机调试
调试时热更新：抖动手机或者选择menu键调出调试菜单
然后选择Enable Hot Reloading（这个更好用些） 或 Enable Live Reload 因为起作用的时机不同，所以后者会退出app需要重新进入才能按逻辑顺序正常打开更新
完成的app界面

十一、使用flex-box布局
我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。

React Native中的Flexbox的工作原理和web上的CSS基本一致，当然也存在少许差异。首先是默认值不同：flexDirection的默认值是column而不是row，
而flex也只能指定一个数字值。

react native中有两个基本元素< View >与< Text >，分别类似于web端div和span，用于布局和修饰。需要注意的是，react native不是所有的CSS属性都支持，

十、设置宽高
最简单的给组件设定尺寸的方式就是在样式中指定固定的width和height。React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点。
<View style={{width: 50, height: 50, backgroundColor: 'powderblue'}} />
为了使用清晰方便使用：
const styles = StyleSheet.create({
            bigblue:{
                color:'#409EFF',
                fontSize:30,
                fontWeight:'bold',
                width: 100,
                height: 100,
                backgroundColor: '#CBF514'
            },
            red:{
                color:'#f55231'
            }

        });
 这种方式定义更好
 所有的样式都定义在styles里面，包括布局：
        red:{
                color:'#f55231',
                flex:3,
                backgroundColor: '#EFF51C'
            }

九、组件的样式
所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法，
例如将background-color改为backgroundColor。

可以直接在组件中内联使用style属性，如：<Image style={{width :193, height: 110 , marginTop: 100}}/> style为react内置属性因此可以
在任意组件中内联使用，注意对于多个单词组成的属性名要用驼峰方式


style属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组
——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。
实际开发中组件的样式会越来越复杂，我们建议使用StyleSheet.create来集中定义组件的样式。比如像下面这样：

因此规定所有样式都使用StyleSheet.create来创建：
const styles = StyleSheet.create({
  bigblue: {
    color: 'blue',
    fontWeight: 'bold',
    fontSize: 30,
  },
  red: {
    color: 'red',
  },
});

调用的时候直接按照属性调用就行：<Text style={styles.red}>just red</Text>
style内置属性 = 大括号包裹的属性变量
如果引用的style变量是一个数组，那么后声明的会覆盖前边相同的样式<Text style={[styles.red, styles.bigblue]}>red, then bigblue</Text>

class SetStyles extends Component{
    render(){
        const styles = StyleSheet.create({
            bigblue:{
                color:'#409EFF',
                fontSize:30,
                fontWeight:'bold'
            },
            red:{
                color:'#f55231'
            }

        });
        return(
            <View>
                <Text style={styles.red}>just red</Text>
                <Text style={styles.bigblue}>just red</Text>
                <Text style={[styles.red,styles.bigblue]}>just red</Text>
                <Text style={[styles.bigblue,styles.red]}>just red</Text>
            </View>
        )
    }
}
注意：color的值不能是颜色的英文color:'red' 会报错

八、组件的属性（相当于class）
大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。

export default class HelloWorldApp extends Component{
    render(){
        let pic = {
            uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'
        };
        return(
            <Text>Hello world!</Text>,
            <Image source={pic} style={{width :193, height: 110 , marginTop: 100}}/>
        )
    }
}

AppRegistry.registerComponent('HelloWorldApp',() => HelloWorldApp)
// 注册应用(registerComponent)后才能正确渲染
// 注意：只把应用作为一个整体注册一次，而不是每个组件/模块都注册

8.1、首先在创建一个组件的时候变量需要卸载render函数里面，和return并列的位置
return里面只添加需要渲染在页面里面的结构代码，不能将变量写在里面。return返回的就是组件最终需要在页面显示的内容
8.2、请注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，
需要执行后取值。因此我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。

在jsx语句中引用变量的时候需要在变量外边包裹一层{}，这样才能告诉jsx模板我这是引用的变量或者表达式，而不会被解释成其他的内容

8.3、AppRegistry.registerComponent(appKey:string,getComponentFunc:ComponentProvider)  static静态方法，进行注册组件
定义了一个名为HelloWorldApp的新的组件（Component），并且使用了名为AppRegistry的内置模块进行了“注册”操作。

这个先了解，深究后边需要再去详细了解

8.4、
七、编写react-native起步
7.1、首先也是组件的概念，把每一个功能模块封装成一个组件
  而一个App的最终界面，其实也就是各式各样的组件的组合。
7.2、因为是使用的jsx语法(JSX——是一种在JavaScript中嵌入XML结构的语法)，所以所有的代码都包含在js文件内。
7.3、编写一个组件，首先要引入对应 react内置组件如<Text></Text>(它专门用来显示文本)
然后用es6的class语法定义一个组件
class HelloWorldApp extends Component {
  render() {
    return (
      <Text>Hello world!</Text>
    );
  }
}
上面的代码定义了一个名为HelloWorldApp的新的组件（Component）。
组件本身结构可以非常简单——唯一必须的就是在render方法中返回一些用于渲染结构的JSX语句。
7.4、组件编写完成之后要暴露出去，这样才能被其他文件引用
该组件编写在Hello.js的文件中：
export default class HelloWorldApp extends Component{
    render(){
        return(
            <Text>Hello world!</Text>
        )
    }
}
这样在需要使用HelloWorldApp组件的时候直接使用import语法就能引用到import App from './Hello';


六、react-native实现热更新

五、安装react-native时要用java1.8才能启动成功
java1.9累死你启动不起来，各种报错

在调整安卓模拟器输入ip地址和端口号的时候要用英文，否则会报错

四、命令行查看被占用的端口号
输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是49157，首先找到它。
查看被占用端口对应的PID，输入命令：netstat -aon|findstr "49157"，回车，记下最后一位数字，即PID,这里是2720
继续输入tasklist|findstr "2720"，回车，查看是哪个进程或者程序占用了2720端口，结果是：svchost.exe
一、安装官方推荐脚手架：create-react-app
1.1、安装教程：https://www.rails365.net/articles/kai-fa-react-ying-yong-zui-hao-jiao-shou-jia-create-react-app
一、安装模拟器：
下载逍遥安卓模拟器
安装完模拟器后，要使用adb命令Android studio才能识别出来；
打开cmd,输入：adb connect 127.0.0.1:21503（逍遥安卓模拟器的端口号是21503。夜神玩模拟器的端口号是62001。）
connected to 127.0.0.1:21503 就代表连上了
执行下“adb devices”查看下是否有连接设备
二、yarn全局安装不能执行全局命令时：
要安装环境变量：
首先，先查看一下yarn的bin目录，输入yarn global bin
然后在path里面配置上边输出的路径
用yarn下载的包在运行react native init app 报错的解决办法：
在命令行运行下面两句命令：
npm config set registry https://registry.npm.taobao.org  
npm config set disturl https://npm.taobao.org/dist
然后再运行react native init app 就不会报错了
安装完yarn后同理也要设置镜像源：

yarn config set registry https://registry.npm.taobao.org --global
yarn config set disturl https://npm.taobao.org/dist --global


模拟器调试
菜单 》 Dev settings 》 debug server host&。。。》 本地电脑ip+8081端口 192.168.1.101:8081


三、react-native安装教程
3.1、下载Android studio：http://www.android-studio.org/index.php/download
3.2、安装studio：
3.3、项目创建和启动的组合方式
组合1
  create-react-native-app AwesomeProject
  cd AwesomeProject
  npm start
组合2 
react-native init AwesomeProject 
cd AwesomeProject 
react-native run-android

修改react-native启动的端口
react-native start --port 9999
或者通过修改配置文件修改：
http://blog.csdn.net/fengyuzhengfan/article/details/77389953
3.4、

