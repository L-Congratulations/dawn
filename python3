十四、web开发：
14.1、HTTP协议简介：

浏览器和服务器之间的传输协议是HTTP，用于浏览器和服务器的通信。

Host:www.sina.com.cn 
表示请求的域名是.sina.com.cn 如果一台服务器有多个网站，服务器就需要通过Host来
区分浏览器请求的是哪个网站。
Content-Type: text/html
指示响应的内容，这里是text/html表示html网页。请注意，浏览器就是依靠content-type
来判断响应的内容是网页还是图片、视频、音乐。浏览器并不靠URL来判断响应的内容，
所以，即使URL是http://example.com/abc.jpg，它也不一定就是图片。

HTTP响应的body就是html源码。通过查看网页源码就可以在浏览器中直接查看html源码
当浏览器读取到新浪首页的html源码后，他会解析HTML，显视页面，然后，根据HTML里面
的各种连接，在发送HTTP请求给新浪服务器，拿到响应的图片，视频、flash、JavaScript脚本、
css等各种资源，最终显示出一个完整的页面。所以我们在network下面能看到很多额外的
HTTP请求。

14.2、HTTP请求流程：
（1）、浏览器首先向服务器发送HTTP请求，请求包括：
方法：get、post
路径：/full/url/path
域名：由Host头指定：Host:www.sina.com.cn
以及其他相关的header
（2）、服务器向浏览器返回HTTP响应，响应包括：
响应代码：200成功，3xx重定向。。。
响应类型：由content-type指定
以及其他相关的header
通常服务器的HTTP响应会携带内容，也就是一个body，包含响应的内容，网页的html源码就在
body中。
（3）、如果浏览器还继续想服务器请求其他资源，比如图片，就再次发出HTTP请求，重复一二步骤

web采用的http协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写
一个页面时，我们只需要在HTTP请求中吧html发送出去，不需要考虑如何附带图片、视频等，
浏览器如果需要请求图片和视频，它就会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源。

HTTP协议同时具备极强的扩展性，虽然浏览器请求的是http://www.sina.com.cn/的首页，
但是新浪在HTML中可以链入其他服务器的资源，
比如<img src="http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png">，
从而将请求压力分散到各个服务器上，并且，一个站点可以链接到其他站点，无数个站点互相链接起来，
就形成了World Wide Web，简称WWW。



十三、python高级特性：

13.1、切片
取list或tuple的部分元素
如，一个list如下：
>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
取中间三个元素：
笨方法：用循环

>>> r = []
>>> n = 3
>>> for i in range(n):
...     r.append(L[i])
... 
>>> r
['Michael', 'Sarah', 'Tracy']
对这种经常去指定索引范围的操作，循环十分繁琐，因此，python提供了切片（Slice）操作，
能大大简化这种操作：
对应上面的问题，取中间3个元素，用一行代码就可以完成切片：
>>> L[0:3]
['Michael', 'Sarah', 'Tracy']

L = ['one','two','three',4,5,6]

print (L)

print (L[1:4])
['two','three',4]
L[1:4]表示，从索引1开始取，知道索引4为止，但不包括4.即索引1,2,3正好是三个元素，
类似的，既然python职场L[-1]取倒数第一个元素，那么它同样支持倒数切片：
print (L[-3:-1])  // print(L[-3:])从倒数第三个开始到结束 [4,5,6]
[4,5]
从倒数第三个开始，到倒数第一个截止，不包括倒数第一个

print(L[:10:2]) // 前10个数，每两个取一个[0,2,4,6,8]
print(L[::5])   // 所有数，每5个取一个[0,5,10,15....95]
print(L[:])  // 只写[:]就可以原样复制一个list：

tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：

>>> (0, 1, 2, 3, 4, 5)[:3]
(0, 1, 2)

字符串'xxxx'也可以看作是一种list，每个元素就是一个字符串，因此，字符串也可以用切片操作，只是操作
结果仍是字符串：
S = 'abcdefg'

print (S[-6::2])  // [bdf]

很多编程语言中，针对字符串提供了很多种截取函数，例如substring，其实目的就是对字符串切片。python
没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单

13.2、迭代：
如果给定一个list或tuple，我们可以通过for循环来遍历这个list或者tuple，这种遍历我们
称为迭代

在python中，迭代是通过for..in来完成的，可以看出，python的for循环抽象程度要高于C的for循环，
因为python的for循环不仅可以用在list或tuple上，还可以作用在其他科迭代对象上。

list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论
有无下标，都可以迭代，比如dict就可以迭代：

d = {'a':1,'b':2,'c':3}

for i in d:
    print (d[i])
    
因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。
默认情况下，dict迭代的是key。如果要迭代value，key用for value in d.values()，
如果要同时迭代key和value，可以用for k,v in d.items().


由于字符串也是可迭代对象，因此，也可以作用于for循环：

srt = 'ABNCD'

for i in srt:
    print (i)
所以，当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们
不太关心该对象究竟是list还是其他数据类型。

那么，如何判断一个对象是否是可迭代对象呢？可以通过collection模块的iterable类型判断：
>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False



13.3、列表生成式：

列表生成式即List Comprehensions，是python内置的非常简单却强大的可以用来创建list的
生成式。
如，要生成list[1,2,3,4,5,6,7,8,9,10]可以用list(range(1,11))来实现

但如果要生成[1x1, 2x2, 3x3, ..., 10x10]怎么做？方法一是循环：

>>> L = []
>>> for x in range(1, 11):
...    L.append(x * x)
...
>>> L
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：
print ([x*x for x in range(1,11)])
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
写列表生成式时，要把生成的元素x*x放到前面，后面跟for循环，就可以把list创建出来，十分有用
，多些基础，很快就可以熟悉这种语法。

for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：
print ([x*x for x in range(1,11) if x % 2 == 0])
// [4, 16, 36, 64, 100]

还可以使用两层循环，可以生成全排列：
print ([m+n for m in 'abc' for n in 'xyz'])
//['ax', 'ay', 'az', 'bx', 'by', 'bz', 'cx', 'cy', 'cz']

三层和三层以上的循环就很少用到了
运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，
可以通过一行代码实现：
import os # 导入os模块
print ([d for d in os.listdir('.')]) #  os.listdir可以列出文件和目录
//['.idea', 'demo.py']

for循环其实可以同时使用两个甚至多给变量，比如dict和items()可以同时迭代key和value：
d = {'x':1,'y':2,'z':3}
for k,v in d.items():
    print (k,'=',v) // 注意这的这种写法
//     x = 1   y = 2  z = 3

因此，列表生成式也可以使用两个变量来生成list：
d = {'x':'a','y':'b','z':'c'}
print ([k + '='+ v for k,v in d.items()]) // 这要求value必须是字符串，否则不能与
字符进行拼接

如果list中既包含字符串，又包含整数，由于非字符串类型没有lower()方法，所以列表生成式会报错：
L = ['Hello', 'World', 18, 'Apple', None]

// ['x=a', 'y=b', 'z=c']

把list中所有的字符串变成小写：
>>> L = ['Hello', 'World', 'IBM', 'Apple']
>>> [s.lower() for s in L]
['hello', 'world', 'ibm', 'apple']


13.4、生成器：
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。
而且，创建一个包含100万个元素的列表，不仅占用很大的内存空间，如果我们仅仅需要访问
前面几个元素，那后面绝大多数元素占用的空间都拜拜浪费了。

所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算
后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在python中，这种一边
循环一边计算的机制，称为生成器：generator。
yaochuang


十二、递归函数：
在函数内部，可以调用其他函数，如果一个函数在内部调用自身本身，这个函数就是地柜函数
12.1、阶乘：
def fact(x):
    if x == 1:
        return 1
    return x*fact(x-1)

print (fact(5))
递归函数的有点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，
但循环的逻辑不如递归清晰。
使用递归函数需要注意防止栈溢出，在计算机中，函数调用时通过栈这种数据结构实现的，
每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈
的大小不是无限的，所以，递归调用的次数过多会导致栈溢出。

解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，
吧循环看成是一种特殊的尾递归函数也是可以的。

尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，
编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只能占用一个栈帧，
不会出现栈溢出的情况

上面的return x*fact(x-1)引入了乘法表达式，所以就不是尾递归了，要改成尾递归，需要将
每一步的乘积传入到递归函数中（将乘法表达式封装成一个函数，通过调用函数来达到目的）
def fact(n):
    return fact_iter(n,1)

def fact_iter(num,product):
    if num == 1:
        return product
    return fact_iter(num - 1,num*product)


-----------------
搞清楚计算机函数调用的物理机制：

-------------------

十一、函数的参数：
python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，
使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码

11.1、默认参数
由于我们经常计算x的平方，所以，完全可以把第二个参数n的默认值设定为2：
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
 这样，当我们调用power(5)时，相当于调用power(5,2):
 而对于n非2的其他情况，就必须明确的传入n，比如power(5,3)。
 从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数有几点要注意：
 （1）、必选参数在前，默认参数在后，否则会报错
 （2）、当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
 使用默认参数最大的好处就是能降低调用函数的难度。
如：小学生注册的函数，需要传入name和gender两个参数，如果要继续传入年龄城市等信息，这样会使调用函数的复杂度大大增加。
我们可以把年龄和城市设置为默认参数：
def enroll(name, gender, age=6, city='Beijing'):
    print('name:', name)
    print('gender:', gender)
    print('age:', age)
    print('city:', city)
这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：

>>> enroll('Sarah', 'F')
name: Sarah
gender: F
age: 6
city: Beijing
只有与默认参数不符的学生才需要提供额外的信息：

enroll('Bob', 'M', 7)
enroll('Adam', 'M', city='Tianjin')

可见默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的是参数来实现。无论简单调用还是复杂调用，函数只需要定义一个
也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，
city参数用传进去的值，其他默认参数继续使用默认值。


定义默认参数要牢记一点：默认参数必须指向不变对象！！！！！


如果想要传入的默认参数是list，则可以通过下面方法来实现：
我们可以用None这个不变对象来实现：

def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
    
为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，
多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。    
 
 
11.2、可变参数
可变参允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装位一个tuple。
要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，
这样，函数可以定义如下：
def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
但是调用的时候，需要先组装出一个list或tuple：

>>> calc([1, 2, 3])
14
>>> calc((1, 3, 5, 7))
84

如果利用可变参数，调用函数的方式可以简化成这样：

>>> calc(1, 2, 3)
14
>>> calc(1, 3, 5, 7)
84
所以，我们把函数的参数改为可变参数：

def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号
在函数内部，尝试numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：
>>> calc(1, 2)
5
>>> calc()
0

如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：

>>> nums = [1, 2, 3]
>>> calc(nums[0], nums[1], nums[2])
14
这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：

>>> nums = [1, 2, 3]
>>> calc(*nums)
14
*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。

11.3、关键字参数：
关键字参数允许你传入0个或任意个喊参数名的参数，这些关键字参数在函数内部自动组装位一个dict
def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：

>>> person('Michael', 30)
name: Michael age: 30 other: {}
也可以传入任意个数的关键字参数：

>>> person('Bob', 35, city='Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，
但是，如果调用者愿意提供更多的参数，
我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，
利用关键字参数来定义这个函数就能满足注册的需求。

和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：

>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, city=extra['city'], job=extra['job'])
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
当然，上面复杂的调用可以用简化的写法：

>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **extra)
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，
kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。


11.4、命名关键字参数：
对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。
仍以person()函数为例，我们希望检查是否有city和job参数：

def person(name, age, **kw):
    if 'city' in kw:
        # 有city参数
        pass
    if 'job' in kw:
        # 有job参数
        pass
    print('name:', name, 'age:', age, 'other:', kw)
但是调用者仍可以传入不受限制的关键字参数：
>>> person('Jack', 24, city='Beijing', addr='Chaoyang', zipcode=123456)

如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：

def person(name, age, *, city, job):
    print(name, age, city, job)
和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。

调用方式如下：

>>> person('Jack', 24, city='Beijing', job='Engineer')
Jack 24 Beijing Engineer

如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：

def person(name, age, *args, city, job):
    print(name, age, args, city, job)
命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：
>>> person('Jack', 24, 'Beijing', 'Engineer')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: person() takes 2 positional arguments but 4 were given
命名关键字参数可以有缺省值，从而简化调用：

def person(name, age, *, city='Beijing', job):
    print(name, age, city, job)
由于命名关键字参数city具有默认值，调用时，可不传入city参数：

>>> person('Jack', 24, job='Engineer')
Jack 24 Beijing Engineer
使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，
Python解释器将无法识别位置参数和命名关键字参数：


11.5、参数组合：
在python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是
请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数
比如定义一个函数，包含上述若干种参数：

def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

def f2(a, b, c=0, *, d, **kw):   
// 定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)


在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。

>>> f1(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>> f1(1, 2, c=3)
a = 1 b = 2 c = 3 args = () kw = {}
>>> f1(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>> f1(1, 2, 3, 'a', 'b', x=99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
>>> f2(1, 2, d=99, ext=None)
a = 1 b = 2 c = 0 d = 99 kw = {'ext': None}
最神奇的是通过一个tuple和dict，你也可以调用上述函数：

>>> args = (1, 2, 3, 4)
>>> kw = {'d': 99, 'x': '#'}
>>> f1(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}
>>> args = (1, 2, 3)
>>> kw = {'d': 88, 'x': '#'}
>>> f2(*args, **kw)
a = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}


所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。

 虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。
 
 
 
 
十、函数
python不打能非常灵活的定义函数，而且本身内置了很多有用的函数，key直接调用
要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数abs，可以直接从python的官方网站查看文档：
http://docs.python.org/3/library/functions.html#abs
调用函数的时候，如果传入的参数不对，会报TypeError错误，调用的方式直接函数名然后里面传入参数，如：>>> int('123')


10.1、数据类型转换
>>> int('123')
123
>>> int(12.34)
12
>>> float('12.34')
12.34
>>> str(1.23)
'1.23'
>>> str(100)
'100'
>>> bool(1)
True
>>> bool('')
False        

10.2、定义函数：
在python中，定义一个函数要是用def语句，依次写出函数名、括号、括号中的参数和冒号：然后在缩进块中编写函数体，函数的返回值用return语句返回
>>> def func(x):
        if x > 0:
                return x
        else:
                return -x
                

请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。


10.3、数据类型检查
可以用内置函数ininstance()实现：
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误

10.4、返回多个值
比如坐标：
import math

def move(x, y, step, angle=0):   // 参数能直接赋值
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny   // 返回多个值的时候需要用‘,’进行分割
   
import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。

然后，我们就可以同时获得返回值：

>>> x,y = move(100, 100, 60, math.pi / 6)   // 可以把返回值分别赋值给想x,y
>>> print(x,y)   // 分别输出x,y
151.96152422706632 70.0   
>>> print(y)  //单独输出y
70.0
但其实这只是一种假象，Python函数返回的仍然是单一值：

>>> r = move(100, 100, 60, math.pi / 6)
>>> print(r)
(151.96152422706632, 70.0)        

定义函数时，需要确定函数名和参数个数；

如果有必要，可以先对参数的数据类型做检查；

函数体内部可以用return随时返回函数结果；

函数执行完毕也没有return语句时，自动return None。

函数可以同时返回多个值，但其实就是一个tuple。



九、python基础-dict和set
9.1、python内置了字典：dict的支持dict全程dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度
用python写一个dict：
>>> d = {'one':95, 'two': 80 , 'three': 99}  // dict是用{}
>>> d['one']   // 取值的时候是根据索引[]来查找
95

把数据放入dist的方法，除了初始化时指定外，还可以通过key放入：
>>> d['four'] = 67
>>> d['four']
67

由于一个key只能对应一个value，所以当多次对一个key放入value的时候，后面的值会把前面的值覆盖

如果key不存在则会报错
要避免key不存在的错误，有两种办法：
一是：通过in判断key是否存在：
>>> 'five' in d
False
二是：通过dict提供的get（）方法，如果key不存在key返回NOne或者自己制定的value：
>>> d.get('five')  // 如果没有key则什么都不返回，有的话则返回对应的value
>>> d.get('five', -1) // 如果没有key则返回-1，有的话返回对应的value


删除一个key：
用pop(key)方法，对应的calue也会从dict中删除

请务必主要，dict内部存放的顺序和key放入的顺序是没有关系的


和list比较，dict有以下几个特点：
（1）、查找和插入的速度极快，不会随着key的增加而变慢
（2）、需要占用大量的内存，内存浪费多
所以，dict是用空间来换取时间的一种方法

dictkey用在需要高速查找的很多地方，python代码中几乎无处不在，正确使用dict非常重要，需要记牢的第一条就是dict的key必须是不可变对象
dict是通过key计算位置，使用的算法称为哈希算法

在python中，字符串、整数等都是不可变的，因此可以放心地作为key。而list是可变的，不能作为key



9.2、set
set和dict类似，也是一组key的集合，但不存储value。在set中，没有重复的key
重复的元素会被自动过滤掉

通过add(key)添加元素到set中 通过remove(key)方法删除元素
set和dict的唯一区别仅在于没有存储对应的value，

八、python基础-循环
为了让计算机能计算成千上万次的重复运势，我们就需要循环语句
python的循环有两种
8.1、for...in循环，依次把list或tuple中的每个元素迭代出来
>>> names = ['one','two','three']
>>> for name in names:
        print(name)
        
做累加：
>>> sum = 0
>>> for x in [1,2,3,4,5,6,7]:
        sum = sum + x
>>>print(sum)        

range():可以生成一个整数序列
>>> first = range(6)   // 生成的序列是从0开始小于6的整数
>>>print(first)
range(0,6)

list()：函数可以将range转换为list
>>>list(first)
[0,1,2,3,4,5]


8.2、while循环
只要条件满足，就不断循环，条件不满足时退出循环。如计算100以内所有奇数之和：
>>> sun = 0
>>> n = 99
>>> while n>0:
        sum = sum + n
        n = n - 2
>>> print(sum)        


break语句可以提前退出循环：
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')

continue语句可以跳过当前这次循环，直接开始下一次循环
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用continue语句跳过某些循环

break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。

要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，
上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。



七、python基础-条件判断
计算机之所以能做很多自动化的任务，因为他可以自己做条件判断
7.1、if
根据python的缩进规则，如果if语句判断是true，就把说句的两行print语句执行了，否则什么也不做
age = 20
if age >= 18:   // 注意不要少写了冒号:
    print('your age is', age)
    print('adult')


if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
    
7.2、字符串不能直接和整数比较，需要用int()函数将str转化成整数
s = input('birth: ')
birth = int(s)
if birth < 2000:
    print('00前')
else:
    print('00后')
    
    
    

六、python基础-list和tuple
6.1、list
python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
定义一个已知的列表：
>>> classmates = ['michael','bob','sany']
打出classmates：
>>> classmates   // 输入列表名称后会自动显示出列表的内容
['michael','bob','sany'] 


变量classmates就是一个list。用len()函数可以获得list元素的个数
>>> len(classmates)
3
用索引来访问list中每一个位置的元素：
>>> classmates[0]
'michael'

当索引超出范围时，会报一个IndexError错误，所以，要确保索引不要越界

如果要获取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
>>> classmates[-1]
'sany'
以此类推，可以获取倒数第二个，倒数第三个：
>>> classmates[-2]
'bob'

list是一个可变的有序表，所以，可以往list中追加元素到末尾：
>>> classmates.append('adm')
>>> classmates
['michael','bob','sany','adm']
把元素插入到指定的位置，比如索引号位1的位置：
>>> classmates.insert(1, 'Jack')
>>> classmates
['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
数组操作的一系列操作如下链接：
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000



6.2、tuple
tuple和list类似，但是tuple一旦初始化就不能修改，没有增删改查等操作
>>> classmates = ('Michael', 'Bob', 'Tracy')  // list定义时是[] tuple定义时是()
tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，
但指向的这个list本身是可变的！





五、python基础-字符串编码
因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理
ASCII编码是（早期美国人发明的，只涉及到大小写英文字母，数字和符号的转化，其他语言不能识别处理）
UTF-8包含ASCII编码

5.1、python的字符串
在最新的python3版本中，字符串是以Unicode编码的，也就是python的字符串支持多语言
编码与机器码之间转化：ord()和 chr()  
>>> ord('中')
20013
>>> chr(66)
'B'

5.2、格式化
%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，
后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
>>> 'Hello, %s' % 'world'     // %s是占位符，在这用world来代替占位符
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'




一、windows集成python2和python3
https://www.cnblogs.com/thunderLL/p/6643022.html


二、python入门
exit()退出Python
2.1、命令行模式和Python交互模式
在命令行模式下，可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件。

Hello.py在哪个文件目录下就要在哪个文件目录下执行python Hello.py 否则会报错找不到要执行的.py文件
进入python交互界面后只能识别python语法，执行 python Hello.py会报错（执行一个.py文件只能在命令行模式执行）

2.2、python输出
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：

print ('这是','第一个','中间是           多个空格') 
输出的时候输出为：这是 第一个 中间是           两个空格（逗号翻译为了空格，引号里面的空格直接翻译为了空格并输出）

2.3、输入
Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里
当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。

输入完成后，不会有任何提示，Python交互式命令行又回到>>>状态了。那我们刚才输入的内容到哪去了？答案是存放到name变量里了
可以直接输入name查看变量内容：
name = input()
print('名字是： ',name)

input()可以让你显示一个字符串来提示用户：
name = input('请输入你的名字：')
print('名字是： ',name)


输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。


三、python基础：
3.1、注释：
以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。

3.2、语句：
Python的语法比较简单，采用缩进方式，每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。
# print absolute value of an integer:
a = 100
if a >= 0:
    print(a)
else:
    print(-a)

3.3、数据类型和变量
字符串：如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：'I\'m \"OK\"!'
布尔值：布尔值可以用and、or和not运算。
>>> True and True
True
空值：空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
变量：变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头
a = 1
变量a是一个整数。

t_007 = 'T007'
变量t_007是一个字符串。
在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
a = 123 # a是整数
print(a)
a = 'ABC' # a变为字符串
print(a)
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。

请不要把赋值语句的等号等同于数学的等号。比如下面的代码：

x = 10
x = x + 2
在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。

变量在内存中的表示：
Python解释器干了两件事情：
在内存中创建了一个'ABC'的字符串；
在内存中创建了一个名为a的变量，并把它指向'ABC'。
如：a = 'ABC'
b = a
a = 'XYZ'
print(b)
输出结果是ABC
逻辑：python在内存中创建了一个字符串，然后创建了一个名为a的变量，a指向'ABC'，
又创建了一个名为b的变量，变量b指向变量a所指向的数据，此时b也是指向'ABC'，
又在内存中创建一个'XYZ'的字符串，并把a指向'XYZ',
因为b已经指向了'ABC'，并且没有再次改变他的指向，所以b的值就是'ABC'。

3.4、运算符：
/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：

>>> 9 / 3
3.0
还有一种除法是//，称为地板除，两个整数的除法仍然是整数：

>>> 10 // 3
3
你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。

因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：

>>> 10 % 3
1
无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。

四、安装mysql
在百度软件中心中选5.7.17版本安装 http://rj.baidu.com/soft/detail/17534.html
教程：http://www.jb51.net/article/119685.htm
