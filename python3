十一、函数的参数：
python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，
使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码

11.1、默认参数
由于我们经常计算x的平方，所以，完全可以把第二个参数n的默认值设定为2：
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
 这样，当我们调用power(5)时，相当于调用power(5,2):
 而对于n非2的其他情况，就必须明确的传入n，比如power(5,3)。
 从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数有几点要注意：
 （1）、必选参数在前，默认参数在后，否则会报错
 （2）、当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
 使用默认参数最大的好处就是能降低调用函数的难度。
如：小学生注册的函数，需要传入name和gender两个参数，如果要继续传入年龄城市等信息，这样会使调用函数的复杂度大大增加。
我们可以把年龄和城市设置为默认参数：
def enroll(name, gender, age=6, city='Beijing'):
    print('name:', name)
    print('gender:', gender)
    print('age:', age)
    print('city:', city)
这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：

>>> enroll('Sarah', 'F')
name: Sarah
gender: F
age: 6
city: Beijing
只有与默认参数不符的学生才需要提供额外的信息：

enroll('Bob', 'M', 7)
enroll('Adam', 'M', city='Tianjin')

可见默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的是参数来实现。无论简单调用还是复杂调用，函数只需要定义一个
也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，
city参数用传进去的值，其他默认参数继续使用默认值。


定义默认参数要牢记一点：默认参数必须指向不变对象！！！！！


如果想要传入的默认参数是list，则可以通过下面方法来实现：
我们可以用None这个不变对象来实现：

def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
    
为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，
多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。    
 
 
11.2、可变参数
可变参允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装位一个tuple。
要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，
这样，函数可以定义如下：
def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
但是调用的时候，需要先组装出一个list或tuple：

>>> calc([1, 2, 3])
14
>>> calc((1, 3, 5, 7))
84

如果利用可变参数，调用函数的方式可以简化成这样：

>>> calc(1, 2, 3)
14
>>> calc(1, 3, 5, 7)
84
所以，我们把函数的参数改为可变参数：

def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号
在函数内部，尝试numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：
>>> calc(1, 2)
5
>>> calc()
0

如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：

>>> nums = [1, 2, 3]
>>> calc(nums[0], nums[1], nums[2])
14
这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：

>>> nums = [1, 2, 3]
>>> calc(*nums)
14
*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。

11.3、关键字参数：


十、函数
python不打能非常灵活的定义函数，而且本身内置了很多有用的函数，key直接调用
要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数abs，可以直接从python的官方网站查看文档：
http://docs.python.org/3/library/functions.html#abs
调用函数的时候，如果传入的参数不对，会报TypeError错误，调用的方式直接函数名然后里面传入参数，如：>>> int('123')


10.1、数据类型转换
>>> int('123')
123
>>> int(12.34)
12
>>> float('12.34')
12.34
>>> str(1.23)
'1.23'
>>> str(100)
'100'
>>> bool(1)
True
>>> bool('')
False        

10.2、定义函数：
在python中，定义一个函数要是用def语句，依次写出函数名、括号、括号中的参数和冒号：然后在缩进块中编写函数体，函数的返回值用return语句返回
>>> def func(x):
        if x > 0:
                return x
        else:
                return -x
                

请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。


10.3、数据类型检查
可以用内置函数ininstance()实现：
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误

10.4、返回多个值
比如坐标：
import math

def move(x, y, step, angle=0):   // 参数能直接赋值
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny   // 返回多个值的时候需要用‘,’进行分割
   
import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。

然后，我们就可以同时获得返回值：

>>> x,y = move(100, 100, 60, math.pi / 6)   // 可以把返回值分别赋值给想x,y
>>> print(x,y)   // 分别输出x,y
151.96152422706632 70.0   
>>> print(y)  //单独输出y
70.0
但其实这只是一种假象，Python函数返回的仍然是单一值：

>>> r = move(100, 100, 60, math.pi / 6)
>>> print(r)
(151.96152422706632, 70.0)        

定义函数时，需要确定函数名和参数个数；

如果有必要，可以先对参数的数据类型做检查；

函数体内部可以用return随时返回函数结果；

函数执行完毕也没有return语句时，自动return None。

函数可以同时返回多个值，但其实就是一个tuple。



九、python基础-dict和set
9.1、python内置了字典：dict的支持dict全程dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度
用python写一个dict：
>>> d = {'one':95, 'two': 80 , 'three': 99}  // dict是用{}
>>> d['one']   // 取值的时候是根据索引[]来查找
95

把数据放入dist的方法，除了初始化时指定外，还可以通过key放入：
>>> d['four'] = 67
>>> d['four']
67

由于一个key只能对应一个value，所以当多次对一个key放入value的时候，后面的值会把前面的值覆盖

如果key不存在则会报错
要避免key不存在的错误，有两种办法：
一是：通过in判断key是否存在：
>>> 'five' in d
False
二是：通过dict提供的get（）方法，如果key不存在key返回NOne或者自己制定的value：
>>> d.get('five')  // 如果没有key则什么都不返回，有的话则返回对应的value
>>> d.get('five', -1) // 如果没有key则返回-1，有的话返回对应的value


删除一个key：
用pop(key)方法，对应的calue也会从dict中删除

请务必主要，dict内部存放的顺序和key放入的顺序是没有关系的


和list比较，dict有以下几个特点：
（1）、查找和插入的速度极快，不会随着key的增加而变慢
（2）、需要占用大量的内存，内存浪费多
所以，dict是用空间来换取时间的一种方法

dictkey用在需要高速查找的很多地方，python代码中几乎无处不在，正确使用dict非常重要，需要记牢的第一条就是dict的key必须是不可变对象
dict是通过key计算位置，使用的算法称为哈希算法

在python中，字符串、整数等都是不可变的，因此可以放心地作为key。而list是可变的，不能作为key



9.2、set
set和dict类似，也是一组key的集合，但不存储value。在set中，没有重复的key
重复的元素会被自动过滤掉

通过add(key)添加元素到set中 通过remove(key)方法删除元素
set和dict的唯一区别仅在于没有存储对应的value，

八、python基础-循环
为了让计算机能计算成千上万次的重复运势，我们就需要循环语句
python的循环有两种
8.1、for...in循环，依次把list或tuple中的每个元素迭代出来
>>> names = ['one','two','three']
>>> for name in names:
        print(name)
        
做累加：
>>> sum = 0
>>> for x in [1,2,3,4,5,6,7]:
        sum = sum + x
>>>print(sum)        

range():可以生成一个整数序列
>>> first = range(6)   // 生成的序列是从0开始小于6的整数
>>>print(first)
range(0,6)

list()：函数可以将range转换为list
>>>list(first)
[0,1,2,3,4,5]


8.2、while循环
只要条件满足，就不断循环，条件不满足时退出循环。如计算100以内所有奇数之和：
>>> sun = 0
>>> n = 99
>>> while n>0:
        sum = sum + n
        n = n - 2
>>> print(sum)        


break语句可以提前退出循环：
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')

continue语句可以跳过当前这次循环，直接开始下一次循环
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用continue语句跳过某些循环

break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。

要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，
上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。



七、python基础-条件判断
计算机之所以能做很多自动化的任务，因为他可以自己做条件判断
7.1、if
根据python的缩进规则，如果if语句判断是true，就把说句的两行print语句执行了，否则什么也不做
age = 20
if age >= 18:   // 注意不要少写了冒号:
    print('your age is', age)
    print('adult')


if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
    
7.2、字符串不能直接和整数比较，需要用int()函数将str转化成整数
s = input('birth: ')
birth = int(s)
if birth < 2000:
    print('00前')
else:
    print('00后')
    
    
    

六、python基础-list和tuple
6.1、list
python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
定义一个已知的列表：
>>> classmates = ['michael','bob','sany']
打出classmates：
>>> classmates   // 输入列表名称后会自动显示出列表的内容
['michael','bob','sany'] 


变量classmates就是一个list。用len()函数可以获得list元素的个数
>>> len(classmates)
3
用索引来访问list中每一个位置的元素：
>>> classmates[0]
'michael'

当索引超出范围时，会报一个IndexError错误，所以，要确保索引不要越界

如果要获取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
>>> classmates[-1]
'sany'
以此类推，可以获取倒数第二个，倒数第三个：
>>> classmates[-2]
'bob'

list是一个可变的有序表，所以，可以往list中追加元素到末尾：
>>> classmates.append('adm')
>>> classmates
['michael','bob','sany','adm']
把元素插入到指定的位置，比如索引号位1的位置：
>>> classmates.insert(1, 'Jack')
>>> classmates
['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
数组操作的一系列操作如下链接：
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000



6.2、tuple
tuple和list类似，但是tuple一旦初始化就不能修改，没有增删改查等操作
>>> classmates = ('Michael', 'Bob', 'Tracy')  // list定义时是[] tuple定义时是()
tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，
但指向的这个list本身是可变的！





五、python基础-字符串编码
因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理
ASCII编码是（早期美国人发明的，只涉及到大小写英文字母，数字和符号的转化，其他语言不能识别处理）
UTF-8包含ASCII编码

5.1、python的字符串
在最新的python3版本中，字符串是以Unicode编码的，也就是python的字符串支持多语言
编码与机器码之间转化：ord()和 chr()  
>>> ord('中')
20013
>>> chr(66)
'B'

5.2、格式化
%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，
后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
>>> 'Hello, %s' % 'world'     // %s是占位符，在这用world来代替占位符
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'




一、windows集成python2和python3
https://www.cnblogs.com/thunderLL/p/6643022.html


二、python入门
exit()退出Python
2.1、命令行模式和Python交互模式
在命令行模式下，可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件。

Hello.py在哪个文件目录下就要在哪个文件目录下执行python Hello.py 否则会报错找不到要执行的.py文件
进入python交互界面后只能识别python语法，执行 python Hello.py会报错（执行一个.py文件只能在命令行模式执行）

2.2、python输出
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：

print ('这是','第一个','中间是           多个空格') 
输出的时候输出为：这是 第一个 中间是           两个空格（逗号翻译为了空格，引号里面的空格直接翻译为了空格并输出）

2.3、输入
Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里
当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。

输入完成后，不会有任何提示，Python交互式命令行又回到>>>状态了。那我们刚才输入的内容到哪去了？答案是存放到name变量里了
可以直接输入name查看变量内容：
name = input()
print('名字是： ',name)

input()可以让你显示一个字符串来提示用户：
name = input('请输入你的名字：')
print('名字是： ',name)


输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。


三、python基础：
3.1、注释：
以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。

3.2、语句：
Python的语法比较简单，采用缩进方式，每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。
# print absolute value of an integer:
a = 100
if a >= 0:
    print(a)
else:
    print(-a)

3.3、数据类型和变量
字符串：如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：'I\'m \"OK\"!'
布尔值：布尔值可以用and、or和not运算。
>>> True and True
True
空值：空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
变量：变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头
a = 1
变量a是一个整数。

t_007 = 'T007'
变量t_007是一个字符串。
在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
a = 123 # a是整数
print(a)
a = 'ABC' # a变为字符串
print(a)
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。

请不要把赋值语句的等号等同于数学的等号。比如下面的代码：

x = 10
x = x + 2
在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。

变量在内存中的表示：
Python解释器干了两件事情：
在内存中创建了一个'ABC'的字符串；
在内存中创建了一个名为a的变量，并把它指向'ABC'。
如：a = 'ABC'
b = a
a = 'XYZ'
print(b)
输出结果是ABC
逻辑：python在内存中创建了一个字符串，然后创建了一个名为a的变量，a指向'ABC'，
又创建了一个名为b的变量，变量b指向变量a所指向的数据，此时b也是指向'ABC'，
又在内存中创建一个'XYZ'的字符串，并把a指向'XYZ',
因为b已经指向了'ABC'，并且没有再次改变他的指向，所以b的值就是'ABC'。

3.4、运算符：
/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：

>>> 9 / 3
3.0
还有一种除法是//，称为地板除，两个整数的除法仍然是整数：

>>> 10 // 3
3
你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。

因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：

>>> 10 % 3
1
无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。

四、安装mysql
在百度软件中心中选5.7.17版本安装 http://rj.baidu.com/soft/detail/17534.html
教程：http://www.jb51.net/article/119685.htm
