八、python基础-循环
为了让计算机能计算成千上万次的重复运势，我们就需要循环语句
python的循环有两种
8.1、for...in循环，依次把list或tuple中的每个元素迭代出来
>>> names = ['one','two','three']
>>> for name in names:
        print(name)
        
做累加：
>>> sum = 0
>>> for x in [1,2,3,4,5,6,7]:
        sum = sum + x
>>>print(sum)        

range():可以生成一个整数序列
>>> first = range(6)   // 生成的序列是从0开始小于6的整数
>>>print(first)
range(0,6)

list()：函数可以将range转换为list
>>>list(first)
[0,1,2,3,4,5]


8.2、while循环
只要条件满足，就不断循环，条件不满足时退出循环。如计算100以内所有奇数之和：
>>> sun = 0
>>> n = 99
>>> while n>0:
        sum = sum + n
        n = n - 2
>>> print(sum)        


break语句可以提前退出循环：
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')

continue语句可以跳过当前这次循环，直接开始下一次循环
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用continue语句跳过某些循环

break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。

要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，
上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。



七、python基础-条件判断
计算机之所以能做很多自动化的任务，因为他可以自己做条件判断
7.1、if
根据python的缩进规则，如果if语句判断是true，就把说句的两行print语句执行了，否则什么也不做
age = 20
if age >= 18:   // 注意不要少写了冒号:
    print('your age is', age)
    print('adult')


if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
    
7.2、字符串不能直接和整数比较，需要用int()函数将str转化成整数
s = input('birth: ')
birth = int(s)
if birth < 2000:
    print('00前')
else:
    print('00后')
    
    
    

六、python基础-list和tuple
6.1、list
python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
定义一个已知的列表：
>>> classmates = ['michael','bob','sany']
打出classmates：
>>> classmates   // 输入列表名称后会自动显示出列表的内容
['michael','bob','sany'] 


变量classmates就是一个list。用len()函数可以获得list元素的个数
>>> len(classmates)
3
用索引来访问list中每一个位置的元素：
>>> classmates[0]
'michael'

当索引超出范围时，会报一个IndexError错误，所以，要确保索引不要越界

如果要获取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
>>> classmates[-1]
'sany'
以此类推，可以获取倒数第二个，倒数第三个：
>>> classmates[-2]
'bob'

list是一个可变的有序表，所以，可以往list中追加元素到末尾：
>>> classmates.append('adm')
>>> classmates
['michael','bob','sany','adm']
把元素插入到指定的位置，比如索引号位1的位置：
>>> classmates.insert(1, 'Jack')
>>> classmates
['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
数组操作的一系列操作如下链接：
https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000



6.2、tuple
tuple和list类似，但是tuple一旦初始化就不能修改，没有增删改查等操作
>>> classmates = ('Michael', 'Bob', 'Tracy')  // list定义时是[] tuple定义时是()
tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，
但指向的这个list本身是可变的！





五、python基础-字符串编码
因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理
ASCII编码是（早期美国人发明的，只涉及到大小写英文字母，数字和符号的转化，其他语言不能识别处理）
UTF-8包含ASCII编码

5.1、python的字符串
在最新的python3版本中，字符串是以Unicode编码的，也就是python的字符串支持多语言
编码与机器码之间转化：ord()和 chr()  
>>> ord('中')
20013
>>> chr(66)
'B'

5.2、格式化
%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，
后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
>>> 'Hello, %s' % 'world'     // %s是占位符，在这用world来代替占位符
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'




一、windows集成python2和python3
https://www.cnblogs.com/thunderLL/p/6643022.html


二、python入门
exit()退出Python
2.1、命令行模式和Python交互模式
在命令行模式下，可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件。

Hello.py在哪个文件目录下就要在哪个文件目录下执行python Hello.py 否则会报错找不到要执行的.py文件
进入python交互界面后只能识别python语法，执行 python Hello.py会报错（执行一个.py文件只能在命令行模式执行）

2.2、python输出
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：

print ('这是','第一个','中间是           多个空格') 
输出的时候输出为：这是 第一个 中间是           两个空格（逗号翻译为了空格，引号里面的空格直接翻译为了空格并输出）

2.3、输入
Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里
当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。

输入完成后，不会有任何提示，Python交互式命令行又回到>>>状态了。那我们刚才输入的内容到哪去了？答案是存放到name变量里了
可以直接输入name查看变量内容：
name = input()
print('名字是： ',name)

input()可以让你显示一个字符串来提示用户：
name = input('请输入你的名字：')
print('名字是： ',name)


输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。


三、python基础：
3.1、注释：
以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。

3.2、语句：
Python的语法比较简单，采用缩进方式，每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。
# print absolute value of an integer:
a = 100
if a >= 0:
    print(a)
else:
    print(-a)

3.3、数据类型和变量
字符串：如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：'I\'m \"OK\"!'
布尔值：布尔值可以用and、or和not运算。
>>> True and True
True
空值：空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
变量：变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头
a = 1
变量a是一个整数。

t_007 = 'T007'
变量t_007是一个字符串。
在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
a = 123 # a是整数
print(a)
a = 'ABC' # a变为字符串
print(a)
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。

请不要把赋值语句的等号等同于数学的等号。比如下面的代码：

x = 10
x = x + 2
在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。

变量在内存中的表示：
Python解释器干了两件事情：
在内存中创建了一个'ABC'的字符串；
在内存中创建了一个名为a的变量，并把它指向'ABC'。
如：a = 'ABC'
b = a
a = 'XYZ'
print(b)
输出结果是ABC
逻辑：python在内存中创建了一个字符串，然后创建了一个名为a的变量，a指向'ABC'，
又创建了一个名为b的变量，变量b指向变量a所指向的数据，此时b也是指向'ABC'，
又在内存中创建一个'XYZ'的字符串，并把a指向'XYZ',
因为b已经指向了'ABC'，并且没有再次改变他的指向，所以b的值就是'ABC'。

3.4、运算符：
/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：

>>> 9 / 3
3.0
还有一种除法是//，称为地板除，两个整数的除法仍然是整数：

>>> 10 // 3
3
你没有看错，整数的地板除//永远是整数，即使除不尽。要做精确的除法，使用/就可以。

因为//除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：

>>> 10 % 3
1
无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。

四、安装mysql
在百度软件中心中选5.7.17版本安装 http://rj.baidu.com/soft/detail/17534.html
教程：http://www.jb51.net/article/119685.htm
