一、什么是Redux
1.1、redux：是js状态容器，提供可预测化的状态管理，可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。

1.2、redux优点：
（1）可预测，始终有一个唯一的准确的数据源（store），通过actionss和reducers来保证整个应用状态同步，做到绝不混乱。
（2）易维护：具备可预测的结果和严格的组织结构让代码更容易维护
（3）易测试：编写可测试代码的首要准则是编写可以仅做有一件事情并且独立的小函数，redux的代码几乎全都是这样的函数：短小、纯粹、分离

1.3、redux的三个基本原则
（1）单一数据源：整个应用的state被存储在一棵object tree中并且这个object tree只存在于唯一一个store中
（2）state是只读的：唯一改变state的方法就是触发action，action是一个用于描述已发生时间的普通对象
（3）使用纯函数来执行修改：为了描述action如何改变state tree，你需要编写reducers

1.4、redux有几部分构成：
（1）action：action就是一个描述发生什么的对象
（2）reducer：形式为（state，action）=>state的纯函数，功能是根据action修改state将其转变成下一个state
（3）store：用于存储state，你可以把它看成一个容器，整个应用只能有一个store
redux应用中所有的state都以一个对象树的形势存储在一个单一的store中。唯一改变state的办法是触发action，action就是一个描述发生什么的对象。为了描述action如何改变state树，你需要编写reducers。

二、action
action是把数据从应用传到store的有效载荷。他是store数据的唯一来源，也就是说要改变store中的state就需要触发action

action本质上是一个普通的js对象，action内必须使用一个字符串类型的“type”字段来表示将要执行的动作，除了type字段以外，action对象的结构完全由你自己决定。多数情况下，type字段会被定义成字符串常量，当应用规模越来越大时，建议使用单独的模块或文件来存放action。

例如：
import {ADD_TODO} from '../actionTypes'

{
type: ADD_TODO，
text:'build by first app'
}

使用单独的模块或者文件来定义action type常量并不是必须的，甚至根本不需要定义。对于应用来说，使用字符串做action type 更方便一些。不过在大型应用中把他们显式地定义为常量还是利大于弊的。


2.1、Action创建函数
action创建函数就是生成action的方法，“action”和action创建函数这两个概念很容易混在一起，使用时，最好注意区分。

在redux中的action创建函数只是简单的返回一个action：
function addTodo(text){
return{
type:Add_TODO,
text
}
}
和直接创建一个常量比，“action创建函数”更容易被移植和测试。


三、reducer
reducer是根据action修改state将其转变成下一个state，记住actions只是描述了有事情发生了这一事实，并没有描述应用如何更新state

(previousState,action)=>newState

保持reducer纯净非常重要，永远不要在reducer中做这些操作：
  *修改传入参数；
  *执行有副作用的操作，如API请求和路由跳转
  *调用非纯函数，如Date.now()或Math.random()(每次调用都会产生一个新的结果就是非纯函数）

提示：reducer是纯函数，它仅仅用于计算下一个state，他应该是完全可预测的：多次传入相同的输入必须产生相同的输出。它不应做有副作用的操作，如API调用或路由跳转，这些应该在dispatch action前发生。

例如：
function todoApp(state=initialState,action){
switch(action.type){
case SET_VISIBILITY_FILTER;
return Object.assign({},state,{visibilityFilter:action.filter})
default:
  return state
}
}

注意：
（1）不要修改state。使用Object.assign()创建了一个副本，必须把第一个参数设置为空对象（assign({},state,{visibilityFilter:action.filter})）.而不能把state作为第一个参数，因为那样会改变第一个参数的值，也就是打破了不能修改state的规定（assign(state,{visibilityFilter:action.filter})）。也可以使用展开操作符：{...state,visibilityFilter:action.filter}因为展开操作符就是对原对象的拷贝数据。和Object.assign()的操作效果一样

（2）在default情况下返回旧的state。遇到位置的action时，一定要返回就的state。

3.1、拆分与合并reducer
当reducer接收的变量很多的时候，就需要在reducer文件中设置若干个case来进行分别处理，当项目变大的时候就会显得reducer文件显得非常臃肿。
所以对于一些看起来相互独立的功能可以拆分到单独的函数或者文件里面。

如：
主题theme.js：
export default function onTheme(state=defaultState,action){
switch (action.type){
case Types.THEME_CHANGE;
return{
...state,
theme:action.theme
};
case Types.THEME_CHANGE;
return{
...state,
theme:action.theme
};
default:
  return state;
}
}

排序sort.js：
export default function onSort(state=defaultState,action){
switch (action.type){
case Types.THEME_CHANGE;
return{
...state,
theme:action.theme
};
case Types.THEME_CHANGE;
return{
...state,
theme:action.theme
};
default:
  return state;
}
}

然后将拆分出去的reducer合并到跟reducer里面：
我们将一个大的reducer拆分成了不同的小的reducer，但是redux规则是只允许一个根reducer，接下来我们需要将几个小的reducer聚合到一个根redecer中。
这里我们需要用到redex提供的combineReducers(rudecers):

import {combineReducers} from 'redux'
import theme from './theme'
import sort from './sore'
import about from './about'

const index = combineReducers({
theme:theme,
sort:sort,
about:about
})

export default index;

combineReducers()所做的只是生成一个函数，这个函数用来调用你的一些列reducer，每个reducer根据他们的key来筛选出state中的一部分数据并处理，然后这个生成的函数再将所有reducer的结果合并成一个大的对象。


四、store
是存储state的容器，store会把两个参数（当前的state树和action）传入reducer。

store有以下职责：
*维持应用的state
*提供getState()方法获取state
*提供dispatch(action)方法更新state：我们可以在任何地方调用store.dispatch(action),包括组件中、HMLHttpRequest回调中，甚至定时器中。
*通过subscribe(listener)注册监听器
*通过subscribe(listener)返回的函数注销监听器

在前一个章节中，我们使用combineReducers()将多个reducer合并成为一个，现在我们通过redux的createStore（）来创建一个Store:
import {createStore} from 'redux'
import todoApp from './reducers'
let store = createStore(todoApp)


五、异步Action
在上文中所讲的action都是基于同步实现的，那么对于网络请求数据库加载等应用场景同步action显然是不适用的，对称我们需要用到异步action。

我们可以将异步action简单理解为：在action中进行异步操作等操作返回后再dispatch一个action

为了使用异步action我们需要引入redux-thunk库，redux-thunk是为redux提供异步action支持的中间件

5.1、使用redux-thunk
（1）首先安装：npm i redux-thunk -S

import thunk from 'redux-thunk'
let middlewares =[
thunk
]
// 添加异步中间件redux-thunk
let createAppStore = applyMiddleware(...middlewares)(createStore)

（2）创建异步action

。。。。


六、异步数据流
默认情况下，createStore()所创建的redux store没有使用middleware，所以只支持同步数据流

你可以使用applyMiddleware()来增强createStore().他可以帮助你用简便的方式来描述异步的action。

像redux-thunk或redux-promise这样支持异步的middleware都包装了store的dispatch()方法，以此来让你dispatch一些除了action以外的其他内容，例如：函数或者promise。你所使用的任何middleware都可以以自己的方式解析你dispatch的任何内容，并继续传递action给下一个middleware。比如支持promise的middleware能够拦截promise，然后为每个promise异步地dispatch一对begin/end actions

当middleware链中的最后一个middleware开始dispatch action时，这个action必须是一个普通对象。


七、在rn中使用redux
7.1、准备工作
（1）根据需要安装以下组件：
redux
react-redux
redux-devtools（redux开发者工具，支持热加载、action重放、自定义UI等功能，开发者工具不需要安装到dependence中去）
redux-thunk（实现action异步的middleware）
redux-persist（支持store本地持久化）
redux-observable（实现可取消的action）


7.2、视图层绑定引入了几个概念：
react-redux主要是用于react和视图进行绑定，里面引入了一些和视图相关的概念，熟悉了这些概念才能更好的使用这个库

（1）<Provider>组件：这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子组件能够轻松的使用connect（）方法绑定store。
（2）connect()：这是react-redux提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传递给connect()的结果，connect()方法会处理与store绑定的细节，并通过selector确定该绑定store中哪一部分的数据。
（3）selector：这是你自己编写的一个函数。这个函数声明了你的组件需要整个store中的哪一部分数据作为自己的props。
（4）dispatch：每当你想要改变应用中的状态时，你就要dispatch一个action，这也是唯一改变状态的方法。


7.3、react-redux提供一下API
（1）Provider：<Provider store> 是在index将app和store进行绑定的时候使用的
使组件层级中的connect()方法都能获得redux store（将store传递给app框架）。通常情况下我们需要将根组件嵌套在标签中才能使用connect()方法。

（2）connect：
连接react组件与store，连接操作会返回一个新的store连接的组件类，并且连接操作不会改变原来的组件类。
react-redux提供了connect函数，connect是一个高阶函数，首先传入mapStateToProps、mapDispatchToProps，然后返回一个生产Component的函数（wrapWithConnect），然后再将真正的Component作为参数传入wrapWithConnect(myComponent),这样就产生出一个经过博鳌国的Connect组件，如export default connect(mapStateProps)(HomePage)


八、在RN中使用redux和react-navigation组合
8.1、在使用react-navigation的项目中，要想集成redux就必须要引入react-navigation-redux-helpers这个库

（1）安装react-navigation-redux-helpers：
npm i react-navigation-redux-helpers -S

（2）配置navigation
